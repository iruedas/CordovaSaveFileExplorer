<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.ActionNotSupportedException">
      <summary>通常、この例外は、呼び出された操作に関連するアクションがサーバー内の操作のいずれのアクションとも一致しない場合に、クライアント上でスローされます。</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ActionNotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ActionNotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.ActionNotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory">
      <summary>クライアントがサービス エンドポイントにメッセージを送信するために使用するチャネルの作成と管理を行います。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ChannelFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <summary>指定した構成ファイルとチャネル ファクトリのサービス エンドポイントによって提供される動作を使用して、チャネル ファクトリを初期化します。</summary>
      <param name="configurationName">構成ファイルの名前。</param>
      <exception cref="T:System.InvalidOperationException">チャネル ファクトリのサービス エンドポイントが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <summary>派生クラスで実装された場合は、チャネル ファクトリに関連付けられたサービス エンドポイントの説明を作成します。</summary>
      <returns>チャネル ファクトリに関連付けられた <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <summary>ファクトリの現在のエンドポイントのチャネル ファクトリを構築します。</summary>
      <returns>現在のファクトリのエンドポイントの <see cref="T:System.ServiceModel.Channels.IChannelFactory" />。</returns>
      <exception cref="T:System.InvalidOperationException">ファクトリ チャネルが接続するサービスのエンドポイントが null であるか、エンドポイントのバインディングが null であるか、または指定された構成名を持つ要素が見つかりません。</exception>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Credentials">
      <summary>このファクトリによって作成されるチャネルを介してサービス エンドポイントと通信するクライアントが使用する資格情報を取得します。</summary>
      <returns>クライアントがこのファクトリに対して使用するように構成されている場合、またはエンドポイントが null 以外で、通信状態が created または opening である場合は、クライアントによって使用される <see cref="T:System.ServiceModel.Description.ClientCredentials" />。それ以外の場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <summary>クローズ操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>クローズ操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <summary>オープン操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>オープン操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Endpoint">
      <summary>ファクトリによって作成されたチャネルが接続するサービス エンドポイントを取得します。</summary>
      <returns>ファクトリにより作成されたチャネルが接続する対象の <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.EnsureOpened">
      <summary>現在のチャネル ファクトリがまだ開いていない場合は、開きます。</summary>
      <exception cref="T:System.ObjectDisposedException">現在のファクトリは閉じている途中であるか、または既に閉じているため、開くことができません。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (存在する場合) を返します。存在しない場合は null を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定したバインドとアドレスを使用して、チャネル ファクトリのサービス エンドポイントを初期化します。</summary>
      <param name="binding">チャネル ファクトリの初期化に使用する <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">チャネル ファクトリの初期化に使用する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>指定したエンドポイントを使用して、チャネル ファクトリのサービス エンドポイントを初期化します。</summary>
      <param name="endpoint">チャネル ファクトリの初期化に使用する <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <summary>指定したアドレスと構成を使用して、チャネル ファクトリのサービス エンドポイントを初期化します。</summary>
      <param name="configurationName">チャネル ファクトリの初期化に使用する構成ファイルの名前。</param>
      <param name="address">チャネル ファクトリの初期化に使用する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnAbort">
      <summary>現在のチャネル ファクトリの内部チャネル ファクトリを終了します。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>現在のチャネル ファクトリに関連付けられた状態オブジェクトを持つ内部チャネル ファクトリに対して、非同期のクローズ操作を開始します。</summary>
      <returns>非同期操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">操作がタイムアウトまでに完了する必要がある時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>現在のチャネル ファクトリに関連付けられた状態オブジェクトを持つ内部チャネル ファクトリに対して、非同期のオープン操作を開始します。</summary>
      <returns>非同期操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">操作がタイムアウトまでに完了する必要がある時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <summary>操作を完了するために、指定したタイムアウトで、内部チャネル ファクトリに対して close を呼び出します。</summary>
      <param name="timeout">操作がタイムアウトまでに完了する必要がある時間を指定する <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <summary>現在のチャネル ファクトリの内部チャネル ファクトリに対する非同期のクローズ操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <summary>現在のチャネル ファクトリの内部チャネル ファクトリに対する非同期のオープン操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <summary>操作を完了するために、指定したタイムアウトで、現在のチャネル ファクトリの内部チャネル ファクトリに対して open を呼び出します。</summary>
      <param name="timeout">オープン操作がタイムアウトになるまでの時間を表す <see cref="T:System.Timespan" />。</param>
      <exception cref="T:System.InvalidOperationException">現在のチャネルの内部チャネルが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpened">
      <summary>チャネル ファクトリの <see cref="T:System.ServiceModel.Description.ClientCredentials" /> オブジェクトの読み取り専用コピーを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpening">
      <summary>現在のチャネルの内部チャネル ファクトリを構築します。</summary>
      <exception cref="T:System.InvalidOperationException">チャネル ファクトリの内部チャネル ファクトリが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <summary>現在のチャネル ファクトリを閉じます。</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory`1">
      <summary>さまざまに構成されたサービス エンドポイントにメッセージを送信するためにクライアントが使用する、さまざまな種類のチャネルを作成するファクトリ。</summary>
      <typeparam name="TChannel">チャネル ファクトリにより作成されたチャネルの型。この型は、<see cref="T:System.ServiceModel.Channels.IOutputChannel" /> または <see cref="T:System.ServiceModel.Channels.IRequestChannel" /> である必要があります。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定したバインドとエンドポイント アドレスを使用して、<see cref="T:System.ServiceModel.ChannelFactory`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">エンドポイントの構成で使用される <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> は null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)">
      <summary>指定したエンドポイントの構成名を使用して、<see cref="T:System.ServiceModel.ChannelFactory`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">エンドポイントで使用される構成名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>指定したエンドポイントの名前とリモート アドレスに関連付けられた <see cref="T:System.ServiceModel.ChannelFactory`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">エンドポイントで使用される構成名。</param>
      <param name="remoteAddress">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpointConfigurationName" /> または <paramref name="remoteAddress" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ServiceModel.ChannelFactory`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channelType">チャネル ファクトリにより作成される <see cref="T:System.Type" /> のチャネル。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelType" /> は null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="channelType" /> がクラスまたは値型であり、インターフェイスではありません。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel">
      <summary>指定したエンドポイント アドレスへの指定した種類のチャネルを作成します。</summary>
      <returns>ファクトリによって作成された <see cref="T:System.ServiceModel.Channels.IChannel" /> 型の <paramref name="TChannel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>指定したエンドポイント アドレスのサービスにメッセージを送信するために使用されるチャネルを作成します。</summary>
      <returns>ファクトリによって作成された <see cref="T:System.ServiceModel.Channels.IChannel" /> 型の <paramref name="TChannel" />。</returns>
      <param name="address">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>指定したトランスポート アドレスを介して特定のエンドポイント アドレスのサービスにメッセージを送信するために使用されるチャネルを作成します。</summary>
      <returns>ファクトリによって作成された <see cref="T:System.ServiceModel.Channels.IChannel" /> 型の <paramref name="TChannel" />。</returns>
      <param name="address">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">チャネルがメッセージを送信するトランスポート アドレスを含む <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> は null なので、</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ChannelFactory" /> には、サポートしない二重操作があります。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateDescription">
      <summary>サービス エンドポイントの説明を作成します。</summary>
      <returns>サービスの <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <exception cref="T:System.InvalidOperationException">コールバック コントラクトが null ですが、サービス エンドポイントは null 以外の値を必要とします。</exception>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1">
      <summary>サービスを呼び出すことができる Windows Communication Foundation (WCF) クライアント オブジェクトを作成するために使用する基本実装を用意します。</summary>
      <typeparam name="TChannel">サービスに接続するために使用されるチャネル。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor">
      <summary>アプリケーション構成ファイルの既定のターゲット エンドポイントを使用して、<see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">構成ファイルに既定のエンドポイント情報がないか、複数のエンドポイントがあります。または、構成ファイルがありません。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定したバインドとターゲット アドレスを使用して、<see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">サービスを呼び出すために使用されるバインド。</param>
      <param name="remoteAddress">サービス エンドポイントのアドレス。</param>
      <exception cref="T:System.ArgumentNullException">バインディングが null です。</exception>
      <exception cref="T:System.ArgumentNullException">リモート アドレスが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <summary>アプリケーション構成ファイル内で <paramref name="endpointConfigurationName" /> によって指定された構成情報を使用して、<see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">アプリケーション構成ファイル内のエンドポイントの名前。</param>
      <exception cref="T:System.ArgumentNullException">指定されたエンドポイント情報が null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンドポイントが見つからないか、エンドポイント コントラクトが有効ではありません。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>指定したターゲット アドレスとエンドポイント情報を使用して、<see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">アプリケーション構成ファイル内のエンドポイントの名前。</param>
      <param name="remoteAddress">サービスのアドレス。</param>
      <exception cref="T:System.ArgumentNullException">エンドポイントが null です。</exception>
      <exception cref="T:System.ArgumentNullException">リモート アドレスが null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンドポイントが見つからないか、エンドポイント コントラクトが有効ではありません。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">アプリケーション構成ファイル内のエンドポイントの名前。</param>
      <param name="remoteAddress">サービスのアドレス。</param>
      <exception cref="T:System.ArgumentNullException">エンドポイントが null です。</exception>
      <exception cref="T:System.ArgumentNullException">リモート アドレスが null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンドポイントが見つからないか、エンドポイント コントラクトが有効ではありません。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Abort">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを、現在の状態から Closed 状態に直ちに遷移させます。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Channel">
      <summary>さまざまな構成のサービス エンドポイントにメッセージを送信するために使用する内部チャネルを取得します。</summary>
      <returns>指定された種類のチャネル。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelFactory">
      <summary>基になる <see cref="T:System.ServiceModel.ChannelFactory`1" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ChannelFactory`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ClientCredentials">
      <summary>操作を呼び出すために使用されるクライアント資格情報を取得します。</summary>
      <returns>クライアントにより提示される ID の証明を表す <see cref="T:System.ServiceModel.Description.ClientCredentials" /> を返します。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <summary>サービスへの新しいチャネルを返します。</summary>
      <returns>サービス コントラクト型のチャネル。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Endpoint">
      <summary>WCF クライアントが接続できるサービスのターゲット エンドポイントを取得します。</summary>
      <returns>ターゲット エンドポイント。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <summary>C# の既定のキーワードの動作をレプリケートします。</summary>
      <returns>T が参照型の場合は null を返し、T が数値型の場合は 0 を返します。</returns>
      <typeparam name="T">キーワードによって参照または数値として識別される型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <summary>基になる <see cref="T:System.ServiceModel.IClientChannel" /> 実装を取得します。</summary>
      <returns>WCF クライアント オブジェクト用のクライアント チャネル。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <summary>イベント ベースの非同期パターンをサポートします。このパターン詳細情報:、「イベントベースの非同期パターンの概要」を参照してください。</summary>
      <param name="beginOperationDelegate">非同期操作を呼び出すために使用されるデリゲート。</param>
      <param name="inValues">非同期呼び出しに対する入力値。</param>
      <param name="endOperationDelegate">非同期呼び出しが完了した後、それを終了するために使用されるデリゲート。</param>
      <param name="operationCompletedCallback">非同期メソッドが完了したときに呼び出されるクライアント提供のコールバック。コールバックは <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" /> に渡されます。</param>
      <param name="userState">非同期呼び出しに関連付けられた <paramref name="userState" /> オブジェクト。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.State">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトの現在の状態を取得します。</summary>
      <returns>オブジェクトの <see cref="T:System.ServiceModel.CommunicationState" /> の値。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> を閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完了時のコールバックを受信するメソッド。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定したタイムアウトで <see cref="T:System.ServiceModel.ClientBase`1" /> を閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ開始操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">その時間内に呼び出しを完了する必要がある時間。</param>
      <param name="callback">操作が完了したときに呼び出されるコールバック オブジェクト。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完了時のコールバックを受信するメソッド。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内で <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">呼び出しを完了する必要のある時間。</param>
      <param name="callback">完了時のコールバックを受信するメソッド。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close"></member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを、現在の状態から Closed 状態に遷移させます。</summary>
      <param name="timeout">呼び出しを完了する必要のある時間。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが現在の状態から Closed 状態に遷移するときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが現在の状態から Closed 状態に遷移するときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">非同期のクローズ操作を完了するために使用される <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">非同期のオープン終了操作を完了するために使用される <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトに対する操作の実行中にエラーが発生したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open"></member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>指定した時間内に、<see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを、Created 状態から Opened 状態に遷移させます。</summary>
      <param name="timeout">その時間内に呼び出しを完了する必要がある時間。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが Created 状態から Opened 状態に遷移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが Created 状態から Opened 状態に遷移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate">
      <summary>非同期操作を呼び出すために <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> によって使用されるデリゲート。</summary>
      <param name="inValues">非同期呼び出しに対する入力値。</param>
      <param name="asyncCallback">対応する非同期操作が完了したときに呼び出されるメソッドを参照します。</param>
      <param name="state">クライアントが異なる非同期呼び出しを区別するための <see cref="T:System.Object" />。クライアントは、イベント完了コールバックの引数パラメーター内でこれを使用できます。</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <summary>ChannelBase ジェネリック クラスを表します。</summary>
      <typeparam name="T">ジェネリック クラス。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <summary>クラスの既存のインスタンスを使用して <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="client">クラスの新しいインスタンスを初期化するために使用するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <summary>指定されたメソッドの名前による非同期呼び出しを開始します。</summary>
      <returns>呼び出された非同期メソッドを参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="methodName">非同期的に呼び出されるメソッドの名前。</param>
      <param name="args">呼び出されたメソッドに渡す引数の配列。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">状態オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <summary>指定されたメソッドの名前による非同期呼び出しを完了します。</summary>
      <returns>呼び出されたメソッドによる <see cref="T:System.Object" /> 出力。</returns>
      <param name="methodName">非同期的に呼び出されたメソッドの名前。</param>
      <param name="args">呼び出されたメソッドに渡す引数の配列。</param>
      <param name="result">呼び出しで返された結果。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <summary>チャネルに関連付けられたアンマネージ リソースの解放およびリセットに関連付けられているアプリケーション定義タスクを実行します。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト T が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <typeparam name="TProperty">メソッドが照会している型オブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>出力チャネルの送信先に対してメッセージを送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ転送を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネルで送信されるメッセージ。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内での出力チャネルの送信先に対するメッセージ送信の非同期操作を開始します。</summary>
      <returns>非同期の送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネルで送信されるメッセージ。</param>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する時間間隔。</param>
      <param name="callback">非同期操作送信の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <summary>出力チャネルの送信先に対してメッセージを送信する非同期操作を完了します。</summary>
      <param name="result">呼び出しで返された結果。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <summary>出力チャネルで送信されるメッセージの送信先となるサービスの送信先を取得します。</summary>
      <returns>出力チャネルでのメッセージの送信先となるサービスの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <summary>出力チャネルの送信先にメッセージを送信します。</summary>
      <param name="message">出力チャネルで送信されるメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定した時間内に現在の出力チャネルでメッセージを送信します。</summary>
      <param name="message">出力チャネルで送信されるメッセージ。</param>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する時間間隔。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <summary>出力チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する URI を取得します。</summary>
      <returns>出力チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>要求/応答メッセージ交換の応答側に要求メッセージを送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ転送を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">転送される要求メッセージ。</param>
      <param name="callback">要求メッセージを転送する非同期操作の完了の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを転送する非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内で要求/応答メッセージ交換の応答側に要求メッセージを送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ転送を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">転送される要求メッセージ。</param>
      <param name="timeout">応答受信の制限時間を指定する時間間隔。</param>
      <param name="callback">要求メッセージを転送する非同期操作の完了の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを転送する非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <summary>送信された要求に対してメッセージ ベースの応答を返す非同期操作を完了します。</summary>
      <returns>要求に対する応答として受信したメッセージ。</returns>
      <param name="result">演算の結果。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <summary>要求チャネルがメッセージを送信する先のリモート アドレスを取得します。</summary>
      <returns>要求チャネルがメッセージを送信する先の <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <summary>メッセージ ベースの要求を送信し、対応するメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答として受信したメッセージ。</returns>
      <param name="message">転送される要求メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定した時間内に、メッセージ ベースの要求を送信し、対応するメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答として受信したメッセージ。</returns>
      <param name="message">転送される要求メッセージ。</param>
      <param name="timeout">応答受信の制限時間を指定する時間間隔。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <summary>要求の送信先のトランスポート アドレスを取得します。</summary>
      <returns>メッセージの送信先のトランスポート アドレスを格納している <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <summary>クライアント チャネルで初期化 UI を許可するかどうかを示す値を取得または設定します。</summary>
      <returns>クライアント チャネルが初期化 UR を許可する場合は True。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>資格情報を取得するユーザー インターフェイスの使用を開始するための非同期呼び出し。</summary>
      <returns>処理が完了したときにコールバックするために使用される <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">このメソッドの完了時に呼び出されるメソッド。</param>
      <param name="state">チャネルの状態に関する情報。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <summary>資格情報を取得するためのユーザー インターフェイスへの呼び出しが行われたかどうかを示す値を取得または設定します。</summary>
      <returns>資格情報を取得するために呼び出しがユーザー インターフェイスに対して実行される場合は True。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <summary>資格情報を取得するためのユーザー インターフェイスの呼び出しを指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>BeginDisplayInitializationUI の呼び出しが終了すると呼び出されます。</summary>
      <param name="result">演算の結果。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <summary>ClientBase オブジェクトが不明なメッセージを受け取るときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <summary>クライアント チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する URI を取得します。</summary>
      <returns>チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する URI。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <summary>通信オブジェクトを、現在の状態から Closed 状態に直ちに遷移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期のクローズ操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>タイムアウトを指定して、通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する時間間隔。</param>
      <param name="callback">非同期のクローズ操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期のオープン操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のオープン操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内で通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する時間間隔。</param>
      <param name="callback">非同期のオープン操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のオープン操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>通信オブジェクトを、現在の状態から Closed 状態に遷移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>通信オブジェクトを、現在の状態から Closed 状態に遷移させます。</summary>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する時間間隔。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>ClientBase オブジェクトが現在の状態から Closed 状態に遷移するときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>ClientBase オブジェクトが現在の状態から Closed 状態に遷移するときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>通信オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">BeginClose() メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>通信オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">BeginOpen() メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>ClientBase オブジェクトに対する操作の実行中にエラーが発生したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>通信オブジェクトを、Created 状態から Opened 状態に遷移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>指定した時間内で、通信オブジェクトを Created 状態から Opened 状態に遷移させます。</summary>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する時間間隔。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>ClientBase オブジェクトが Created 状態から Opened 状態に遷移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>ClientBase オブジェクトが Created 状態から Opened 状態に遷移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <summary>通信指向オブジェクトの現在の状態を取得します。</summary>
      <returns>オブジェクトの <see cref="T:System.ServiceModel.CommunicationState" /> の値。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <summary>送信メッセージのバッチが許可されているかどうかを示す値を取得または設定します。それ以外の場合は false です。</summary>
      <returns>送信メッセージのバッチが許可される場合は True、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <summary>チャネルの入力セッションを取得します。</summary>
      <returns>チャネルの入力セッション。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <summary>チャネルのローカル エンドポイントを取得します。</summary>
      <returns>チャネルのローカル エンドポイント。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <summary>その時間内に操作を完了するか例外をスローする時間を取得または設定します。</summary>
      <returns>操作完了の制限時間を指定する時間間隔。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <summary>チャネルに関連付けられている出力セッションがあれば、それを取得します。</summary>
      <returns>入力セッションが存在する場合は、<see cref="T:System.ServiceModel.Channels.IOutputSession" /> の実装。それ以外の場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <summary>チャネルに関連付けられているリモート アドレスを取得します。</summary>
      <returns>チャネルのリモート <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <summary>現在のセッションの識別子があれば、それを取得します。</summary>
      <returns>現在のセッション識別子 (存在する場合)。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>この拡張可能オブジェクトに対する拡張オブジェクトのコレクションを取得します。</summary>
      <returns>拡張オブジェクトの <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.EndOperationDelegate">
      <summary>によって呼び出されるデリゲートを表します<see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />によって行われた呼び出しが正常に完了<see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />に<see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />です。</summary>
      <param name="result">The result returned by the call made by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /><see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" /> に渡される一意の値に設定されているものとして扱われます。</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <summary>クライアントによる非同期呼び出しの結果を格納します。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results">
      <summary>クライアントによる非同期呼び出しの結果を取得します。</summary>
      <returns>クライアントによる非同期呼び出しの結果を格納する <see cref="T:System.Object" /> の配列。</returns>
    </member>
    <member name="T:System.ServiceModel.CommunicationException">
      <summary>サービスまたはクライアント アプリケーションでの通信エラーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.CommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.CommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.CommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
      <param name="innerException">使用される内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectAbortedException">
      <summary>
        <see cref="T:System.ServiceModel.ICommunicationObject" /> オブジェクトの呼び出しが中止されたときにスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に含まれるメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectFaultedException">
      <summary>エラーが発生している通信オブジェクトに対して呼び出しが行われたときにスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationState">
      <summary>
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が存在できる状態を定義します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closed">
      <summary>通信オブジェクトが閉じた状態にあり、使用できなくなっていることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closing">
      <summary>通信オブジェクトが <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態に移行中であることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Created">
      <summary>通信オブジェクトはインスタンス化され、構成可能であるが、まだ開いていないか、使用できる準備ができていないことを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Faulted">
      <summary>通信オブジェクトで回復不能なエラーや障害が発生し、使用できない状態になっていることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opened">
      <summary>通信オブジェクトが開かれ、使用できる状態になっていることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opening">
      <summary>通信オブジェクトが <see cref="F:System.ServiceModel.CommunicationState.Created" /> 状態から <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態に移行中であることを示します。</summary>
    </member>
    <member name="T:System.ServiceModel.DataContractFormatAttribute">
      <summary>Windows Communication Foundation (WCF) インフラストラクチャに対して、<see cref="T:System.Runtime.Serialization.DataContractSerializer" /> を使用するように指示します。</summary>
    </member>
    <member name="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <summary>シリアル化されたデータの SOAP スタイルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationFormatStyle" /> 値のいずれか。既定値は、<see cref="F:System.ServiceModel.OperationFormatStyle.Document" /> です。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress">
      <summary>サービス エンドポイントとの通信にクライアントが使用する一意のネットワーク アドレスを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <summary>指定した URI 文字列を使用して、<see cref="T:System.ServiceModel.EndpointAddress" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">エンドポイントを識別する URI。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <summary>指定した URI とヘッダーを使用して、<see cref="T:System.ServiceModel.EndpointAddress" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">エンドポイントの位置を示す <see cref="T:System.Uri" />。</param>
      <param name="addressHeaders">エンドポイントと対話するためのアドレス情報を含む <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 型の <see cref="T:System.Array" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.EndpointIdentity,System.ServiceModel.Channels.AddressHeader[])">
      <summary>指定した URI、ID、およびヘッダーを使用して、<see cref="T:System.ServiceModel.EndpointAddress" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">エンドポイントの位置を示す <see cref="T:System.Uri" />。</param>
      <param name="identity">エンドポイントの <see cref="T:System.ServiceModel.EndpointIdentity" />。</param>
      <param name="addressHeaders">エンドポイントと対話するためのアドレス情報を含む <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 型の <see cref="T:System.Array" />。</param>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <summary>匿名 URI のバージョンに依存しない表現を取得します。</summary>
      <returns>http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous の値を持つ <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <summary>エンドポイントの URI とプロパティを、指定したメッセージのヘッダーの値に割り当てます。</summary>
      <param name="message">ヘッダー値が割り当てられる <see cref="T:System.ServiceModel.Channels.Message" /> 。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のエンドポイント アドレスと等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトが現在のアドレスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のエンドポイント アドレスと比較される <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <summary>現在のエンドポイント アドレスの一意のハッシュ コードを提供します。</summary>
      <returns>現在のエンドポイント アドレスの一意のハッシュ コード。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Headers">
      <summary>ビルダーが作成できるエンドポイントのアドレス ヘッダーのコレクションを取得します。</summary>
      <returns>エンドポイントのアドレス情報が格納されている <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Identity">
      <summary>エンドポイントを認証するために使用されるエンドポイントの ID を取得します。</summary>
      <returns>エンドポイントの <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <summary>エンドポイントが匿名であるかどうかを示す値を取得します。</summary>
      <returns>エンドポイントが <see cref="P:System.ServiceModel.EndpointAddress.AnonymousUri" /> の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsNone">
      <summary>エンドポイントの URI が <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" /> であるかどうかを示す値を取得します。</summary>
      <returns>エンドポイントの URI が <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" /> の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.NoneUri">
      <summary>メッセージの送信が禁止されているエンドポイントのアドレスで使用される、バージョンに依存しない URI を取得します。</summary>
      <returns>http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/None の値を持つ <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>指定した 2 つのエンドポイント アドレスが等しくないかどうかを示す値を返します。</summary>
      <returns>2 つのエンドポイント アドレスが同等である場合は true、それ以外の場合は false。</returns>
      <param name="address1">比較する <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
      <param name="address2">比較する <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>指定した 2 つのエンドポイント アドレスが等しくないかどうかを示す値を返します。</summary>
      <returns>2 つのエンドポイント アドレスが同等でない場合は true、それ以外の場合は false。</returns>
      <param name="address1">比較する <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
      <param name="address2">比較する <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)">
      <summary>指定した XML ディクショナリ リーダーから、指定したアドレス バージョンのエンドポイント アドレスを読み取ります。</summary>
      <returns>XML ディクショナリ リーダーから読み取られる <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="addressingVersion">現在のエンドポイント アドレスの <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="reader">エンドポイント アドレスが取得される <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ToString">
      <summary>エンドポイント アドレスに含まれる URI の標準文字列表現を返します。</summary>
      <returns>エンドポイントを識別する URI。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Uri">
      <summary>エンドポイントの URI を取得します。</summary>
      <returns>エンドポイントの <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>指定した XML ディクショナリ ライターに、ノードのすべての子ノードを保存します。</summary>
      <param name="addressingVersion">現在のエンドポイント アドレスの <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">エンドポイント アドレスが保存される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> または <paramref name="addressingVersion" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.EndpointAddressBuilder">
      <summary>指定したプロパティ値を使用して、新しい (不変の) エンドポイント アドレスを生成するためのファクトリです。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>既存のエンドポイント アドレスから <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="address">このインスタンスのプロパティ値を初期化するためにプロパティ値が使用される <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> は null なので、</exception>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Headers">
      <summary>ビルダーが作成できるエンドポイントのアドレス ヘッダーのリストを取得します。</summary>
      <returns>ビルダーが作成できるエンドポイントのアドレス ヘッダーを格納する <see cref="T:System.ServiceModel.Channels.AddressHeader" /> 型の <see cref="T:System.Collections.Generic.List`1" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Identity">
      <summary>ビルダーが作成できるエンドポイントの ID を取得または設定します。</summary>
      <returns>エンドポイントの <see cref="T:System.ServiceModel.EndpointIdentity" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress">
      <summary>現在のエンドポイント アドレス ビルダーのプロパティ値を使用して初期化された新しいエンドポイントのアドレスを作成します。</summary>
      <returns>現在のエンドポイント アドレス ビルダーの値を使用してプロパティが初期化された <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Uri">
      <summary>ビルダーが作成できるエンドポイントの URI を取得または設定します。</summary>
      <returns>エンドポイントのアドレスを指定する <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointIdentity">
      <summary>実装された場合、エンドポイントとメッセージを交換するクライアントによるエンドポイントの認証を可能にする ID を提供する抽象クラス。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.#ctor">
      <summary>空の <see cref="T:System.ServiceModel.EndpointIdentity" /> インスタンスを作成します。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.Equals(System.Object)">
      <summary>指定したオブジェクトが現在の ID オブジェクトと等しいかどうか、またはそれらのセキュリティ プロパティが等しいかどうかを決定する値を返します。</summary>
      <returns>指定された <paramref name="obj" /> オブジェクトが現在の ID と等しい場合、または同一のセキュリティ プロパティが含まれている場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の ID と同等性が比較される <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.GetHashCode">
      <summary>ID の現在のインスタンスのハッシュ コードを用意します。</summary>
      <returns>現在の ID のハッシュ コード。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentity.ToString">
      <summary>ID を返します。</summary>
      <returns>"identity(string)" 形式の <see cref="T:System.String" />。string = <see cref="P:System.ServiceModel.EndpointIdentity.IdentityClaim" /> です。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointNotFoundException">
      <summary>リモート エンドポイントが見つからない、または到達できないときにスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.EndpointNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと現在の例外の発生原因である内部例外を使用して、<see cref="T:System.ServiceModel.EndpointNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.EnvelopeVersion">
      <summary>メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納します。</summary>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues">
      <summary>現在のメッセージのバージョンに関連付けられた SOAP ロールの URI 名で、最終送信先を格納する文字列を取得します。</summary>
      <returns>SOAP1.1 が使用される場合は空の文字列。SOAP1.2 が使用される場合は http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver を格納する文字列。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <summary>現在のメッセージのバージョンに関連付けられた SOAP ロールの URI 名で、次の送信先を格納する文字列を取得します。</summary>
      <returns>SOAP1.1 が使用される場合は http://schemas.xmlsoap.org/soap/actor/next を格納する文字列。SOAP1.2 が使用される場合は http://www.w3.org/2003/05/soap-envelope/role/next を格納する文字列。メッセージ バージョンが none の場合は空の文字列。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.None">
      <summary>SOAP のバージョンを使用しないエンベロープ バージョンを取得します。</summary>
      <returns>SOAP 形式を使用しないエンベロープ バージョン。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <summary>SOAP1.1 エンベロープ バージョンを取得します。</summary>
      <returns>SOAP1.1 <see cref="T:System.ServiceModel.EnvelopeVersion" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap12">
      <summary>SOAP1.2 エンベロープ バージョンを取得します。</summary>
      <returns>SOAP1.2 <see cref="T:System.ServiceModel.EnvelopeVersion" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.ToString">
      <summary>現在のエンベロープ バージョンを表す文字列を取得します。</summary>
      <returns>現在のエンベロープ バージョンの文字列形式。</returns>
    </member>
    <member name="T:System.ServiceModel.ExceptionDetail">
      <summary>エラーの詳細情報を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)">
      <summary>例外から <see cref="T:System.ServiceModel.ExceptionDetail" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exception">
        <see cref="T:System.ServiceModel.ExceptionDetail" /> オブジェクトとしてシリアル化される例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.HelpLink">
      <summary>コンストラクターに渡された例外からヘルプ リンクを取得または設定します。</summary>
      <returns>例外のヘルプ リンク情報。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.InnerException">
      <summary>内部例外を表す <see cref="T:System.ServiceModel.ExceptionDetail" /> オブジェクトを取得または設定します。</summary>
      <returns>内部例外情報。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Message">
      <summary>コンストラクターに渡された例外からメッセージを取得または設定します。</summary>
      <returns>例外メッセージ。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.StackTrace">
      <summary>コンストラクターに渡された例外からスタック トレース情報を取得または設定します。</summary>
      <returns>例外のスタック トレース。</returns>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.ToString">
      <summary>コンストラクターに渡された例外の例外詳細情報を返します。</summary>
      <returns>例外のメッセージとスタック トレース。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Type">
      <summary>コンストラクターに渡された例外の型文字列を取得または設定します。</summary>
      <returns>コンストラクターに渡された例外の型文字列。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultCode">
      <summary>SOAP エラー コードを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">エラー コードの名前。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)">
      <summary>
        <see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">エラー コードの名前。</param>
      <param name="subCode">エラーのサブコード。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)">
      <summary>指定した名前と名前空間を使用して、<see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">エラー コードのローカル名。</param>
      <param name="ns">エラー コードの名前空間の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空の文字列です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)">
      <summary>指定した名前、名前空間、およびエラー サブコードを使用して、<see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">エラー コードのローカル名。</param>
      <param name="ns">エラー コードの名前空間の名前。</param>
      <param name="subCode">エラー サブコードを表す <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空の文字列です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)">
      <summary>指定したサブコードを持つ送信側エラー コードを作成します。</summary>
      <returns>
        <see cref="P:System.ServiceModel.FaultCode.SubCode" /> プロパティ内に作成される SOAP エラー サブコードを持つ <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。</returns>
      <param name="subCode">エラー サブコードを表す <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subCode" /> は null なので、</exception>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsPredefinedFault">
      <summary>エラーが SOAP 1.1 または SOAP 1.2 エラーであるかどうかを示す値を取得します。</summary>
      <returns>エラーが SOAP 1.1 または SOAP 1.2 エラーの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsReceiverFault">
      <summary>エラーが SOAP 1.1 サーバー エラーまたは SOAP 1.2 受信側エラーであるかどうかを示す値を取得します。</summary>
      <returns>エラーが SOAP 1.1 サーバー エラーまたは SOAP 1.2 受信側エラーの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsSenderFault">
      <summary>エラーが SOAP 1.1 クライアント エラーまたは SOAP 1.2 送信側エラーであるかどうかを示す値を取得します。</summary>
      <returns>エラーが SOAP 1.1 クライアント エラーまたは SOAP 1.2 送信側エラーの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Name">
      <summary>エラー コードのローカル名を取得します。</summary>
      <returns>エラー コードのローカル名。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Namespace">
      <summary>エラー コードの名前空間を取得します。</summary>
      <returns>名前空間名の URI (Uniform Resource Identifier)。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.SubCode">
      <summary>エラーのサブコードを取得します。</summary>
      <returns>エラー サブコードを表す <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultContractAttribute">
      <summary>サービス操作で処理エラーが発生したときに返される 1 つ以上の SOAP エラーを指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ServiceModel.FaultContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="detailType">呼び出し元のエラー情報を含むシリアル化可能な型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="detailType" /> 引数が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Action">
      <summary>操作コントラクトの一部として指定された SOAP エラー メッセージのアクションを取得または設定します。</summary>
      <returns>SOAP エラー メッセージのアクションの値。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.DetailType">
      <summary>エラー情報を含む、シリアル化できるオブジェクトの型を取得します。</summary>
      <returns>シリアル化できるエラー クラスを表す型。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Name">
      <summary>Web サービス記述言語 (WSDL) でのエラー メッセージの名前を取得または設定します。</summary>
      <returns>エラー メッセージ 名。既定値は、エラー詳細として使用された型の名前です。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Namespace">
      <summary>SOAP エラーの名前空間を取得または設定します。</summary>
      <returns>SOAP エラーの名前空間。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException">
      <summary>SOAP エラーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.FaultException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)">
      <summary>指定したメッセージ エラーの値と用意されたアクション文字列を使用して、<see cref="T:System.ServiceModel.FaultException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fault">使用する既定の SOAP エラー値が含まれるメッセージ エラー。</param>
      <param name="action">SOAP エラーのアクション。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>指定した理由、エラー コード、およびアクション値を使用して、<see cref="T:System.ServiceModel.FaultException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reason">SOAP エラーの理由。</param>
      <param name="code">SOAP エラーのエラー コード。</param>
      <param name="action">SOAP エラーのアクション値。</param>
    </member>
    <member name="P:System.ServiceModel.FaultException.Action">
      <summary>エラー メッセージの SOAP アクションの値を取得します。</summary>
      <returns>エラー メッセージの SOAP アクションの値。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Code">
      <summary>SOAP エラーのエラー コードを取得します。</summary>
      <returns>SOAP エラーのエラー コード。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])">
      <summary>指定したメッセージ エラー、アクション、および詳細な型の配列から <see cref="T:System.ServiceModel.Channels.FaultException" /> オブジェクトを返します。</summary>
      <returns>SOAP エラー メッセージが受信されたことを示すためにスローできる <see cref="T:System.ServiceModel.FaultException" /> オブジェクト。</returns>
      <param name="messageFault">既定の SOAP エラー情報が含まれるメッセージ エラー。</param>
      <param name="action">エラーのアクション値。</param>
      <param name="faultDetailTypes">エラーの詳細が含まれる型の配列。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])">
      <summary>指定したメッセージ エラーと詳細な型の配列から <see cref="T:System.ServiceModel.Channels.FaultException" /> オブジェクトを返します。</summary>
      <returns>SOAP エラー メッセージが受信されたことを示すためにスローできる <see cref="T:System.ServiceModel.FaultException" /> オブジェクト。</returns>
      <param name="messageFault">既定の SOAP エラー情報が含まれるメッセージ エラー。</param>
      <param name="faultDetailTypes">エラーの詳細が含まれる型の配列。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateMessageFault">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトを返します。</summary>
      <returns>エラー情報を含むメッセージを作成するために <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> に渡すことのできる SOAP エラーのメモリ内表現。エラー メッセージから作成される <see cref="T:System.ServiceModel.FaultException" /> オブジェクトの場合、到着するエラーはこの <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトです。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Message">
      <summary>例外メッセージを取得します。</summary>
      <returns>例外メッセージ。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Reason">
      <summary>SOAP エラーの <see cref="T:System.ServiceModel.FaultReason" /> を取得します。</summary>
      <returns>SOAP エラーの理由。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException`1">
      <summary>コントラクトで指定された SOAP エラーをキャッチするためにクライアント アプリケーションで使用されます。</summary>
      <typeparam name="TDetail">シリアル化可能なエラーの詳細な型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>指定した詳細オブジェクト、SOAP エラー理由、コード、およびアクション値を使用する、<see cref="T:System.ServiceModel.FaultException`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="detail">SOAP エラーの詳細として使用されるオブジェクト。</param>
      <param name="reason">SOAP エラーの理由。</param>
      <param name="code">SOAP エラーのエラー コード。</param>
      <param name="action">SOAP エラーのアクション。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.CreateMessageFault">
      <summary>SOAP エラーを表す <see cref="T:System.ServiceModel.Channels.Message" /> を作成するために使用できる <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトを作成します。</summary>
      <returns>作成されたエラー メッセージ。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException`1.Detail">
      <summary>エラー状態の詳細情報を格納するオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.FaultException`1" /> オブジェクトの型パラメーターである詳細オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.ToString">
      <summary>
        <see cref="T:System.ServiceModel.FaultException`1" /> オブジェクトの文字列を返します。</summary>
      <returns>SOAP エラーの文字列。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReason">
      <summary>SOAP エラーの説明文を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})">
      <summary>指定したエラー変換リストを使用して、<see cref="T:System.ServiceModel.FaultReason" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="translations">特定の言語でエラーを説明している <see cref="T:System.ServiceModel.FaultReasonText" /> オブジェクトの一覧。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translations" /> は null なので、</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="translations" /> が空か、1 つ以上の項目が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)">
      <summary>指定した言語でエラーを説明するテキスト要素を使用して、<see cref="T:System.ServiceModel.FaultReason" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="translation">異なる言語で記述されたエラーの説明に対応する <see cref="T:System.ServiceModel.FaultReasonText" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.String)">
      <summary>指定したエラーの説明を使用して、<see cref="T:System.ServiceModel.FaultReason" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">エラーが発生した理由に関する説明。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <summary>エラーの説明を現在のスレッドで使用する言語で取得します。</summary>
      <returns>エラーの説明を格納する <see cref="T:System.ServiceModel.FaultReasonText" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)">
      <summary>指定した言語で記述されたエラーの説明を取得します。</summary>
      <returns>指定した言語で記述されたエラー テキスト。</returns>
      <param name="cultureInfo">エラーの説明の言語を指定する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Globalization.CultureInfo" /> は null です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.ToString">
      <summary>エラー理由を文字列として返します。</summary>
      <returns>エラー理由を格納する文字列。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReasonText">
      <summary>SOAP エラーの理由のテキストを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String)">
      <summary>指定したエラー テキストを使用する <see cref="T:System.ServiceModel.FaultReasonText" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">SOAP エラーの理由であるテキスト。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ServiceModel.FaultReasonText" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">エラーの理由のテキスト。</param>
      <param name="xmlLang">エラーの言語。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)">
      <summary>説明の言語が、用意された <see cref="T:System.Globalization.CultureInfo" /> オブジェクトと一致しているかどうかを示す値を返します。</summary>
      <returns>指定された <see cref="T:System.Globalization.CultureInfo" /> が一致する場合は true。それ以外の場合は false。</returns>
      <param name="cultureInfo">説明の言語と比較する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</param>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.Text">
      <summary>SOAP エラーの理由のテキストを取得します。</summary>
      <returns>SOAP エラーの理由のテキスト。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.XmlLang">
      <summary>SOAP エラーの理由の言語を取得します。</summary>
      <returns>SOAP エラーの理由の言語。</returns>
    </member>
    <member name="T:System.ServiceModel.IClientChannel">
      <summary>クライアント アプリケーションによって使用される送信要求チャネルと要求/応答チャネルの動作を定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <summary>
        <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> が <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> プロパティ内の <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> オブジェクトを呼び出す、またはそのコレクションが空でない場合に例外をスローするかどうかを指示する値を取得または設定します。</summary>
      <returns>Windows Communication Foundation (WCF) が対話型チャネル初期化子を呼び出すことを許可されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>資格情報を取得するユーザー インターフェイスの使用を開始するための非同期呼び出し。</summary>
      <returns>処理が完了したときにコールバックするために使用される <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">このメソッドの完了時に呼び出されるメソッド。</param>
      <param name="state">チャネルの状態に関する情報。</param>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <summary>資格情報を取得するためのユーザー インターフェイスへの呼び出しが行われたかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> メソッド (または <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> メソッドと <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> メソッド) が呼び出された場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <summary>資格情報を取得するためのユーザー インターフェイスの呼び出し。</summary>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>
        <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> への呼び出しが終了したときに呼び出されます。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <summary>これは予約済みイベントです。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.Via">
      <summary>クライアント チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する URI を取得します。</summary>
      <returns>チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ICommunicationObject">
      <summary>システム内のチャネル、チャネル マネージャー、ファクトリ、リスナー、およびディスパッチャーを含むすべての通信指向オブジェクトとサービス ホストに対して使用する、基本ステート マシンのためのコントラクトを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Abort">
      <summary>通信オブジェクトを、現在の状態から Closed 状態に直ちに遷移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期のクローズ操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> が、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常にクローズする前に、既定のタイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>タイムアウトを指定して、通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期のクローズ操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> が、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常にクローズする前に、指定したタイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期のオープン操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のオープン操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が開きません。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態に入る前に既定の open タイムアウトが経過しました。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内で通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期のオープン操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のオープン操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が開きません。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態に入る前に指定したタイムアウトが経過しました。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close">
      <summary>通信オブジェクトを、現在の状態から Closed 状態に遷移させます。</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> が、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常にクローズする前に、既定の close タイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <summary>通信オブジェクトを、現在の状態から Closed 状態に遷移させます。</summary>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> が、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常にクローズする前に、タイムアウトが経過しました。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closed">
      <summary>通信オブジェクトが、Closing 状態から Closed 状態への通信状態の遷移を完了したときに発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closing">
      <summary>通信オブジェクトが初めて Closing 状態に遷移するときに発生します。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <summary>通信オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> メソッドの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> が、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常にクローズする前に、タイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>通信オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> メソッドの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が開きません。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態に入る前にタイムアウトが経過しました。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Faulted">
      <summary>通信オブジェクトが初めて Faulted 状態に遷移するときに発生します。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open">
      <summary>通信オブジェクトを、Created 状態から Opened 状態に遷移させます。</summary>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が開きません。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態に入る前に既定の open タイムアウトが経過しました。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <summary>指定した時間内で、通信オブジェクトを Created 状態から Opened 状態に遷移させます。</summary>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が開きません。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態に入る前に指定したタイムアウトが経過しました。<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に遷移しました。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opened">
      <summary>通信オブジェクトが、Opening 状態から Opened 状態への通信状態の遷移を完了したときに発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opening">
      <summary>通信オブジェクトが初めて Opening 状態に遷移するときに発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.ICommunicationObject.State">
      <summary>通信指向オブジェクトの現在の状態を取得します。</summary>
      <returns>オブジェクトの <see cref="T:System.ServiceModel.CommunicationState" /> の値。</returns>
    </member>
    <member name="T:System.ServiceModel.IContextChannel">
      <summary>チャネルのコンテキスト コントロールのインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <summary>メッセージをトランスポートに与える前にメッセージ セットを保存するように Windows Communication Foundation (WCF) に指示する値を取得または設定します。</summary>
      <returns>送信メッセージのバッチが許可される場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.InputSession">
      <summary>チャネルの入力セッションを取得します。</summary>
      <returns>チャネルの <see cref="T:System.ServiceModel.Channels.IInputSession" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.LocalAddress">
      <summary>チャネルのローカル エンドポイントを取得します。</summary>
      <returns>チャネルのローカルな <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <summary>その時間内に操作を完了するか例外をスローする時間を取得または設定します。</summary>
      <returns>操作完了の制限時間を指定する <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OutputSession">
      <summary>チャネルに関連付けられている出力セッションがあれば、それを取得します。</summary>
      <returns>入力セッションが存在する場合は、<see cref="T:System.ServiceModel.Channels.IOutputSession" /> の実装。それ以外の場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <summary>チャネルに関連付けられているリモート アドレスを取得します。</summary>
      <returns>チャネルのリモート <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.SessionId">
      <summary>現在のセッションの識別子があれば、それを返します。</summary>
      <returns>現在のセッション識別子 (存在する場合)。</returns>
    </member>
    <member name="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <summary>チャネル、チャネル リスナーやチャネル ファクトリなどのチャネルマネージャー、およびサービスホストによって使用される通信のタイムアウトを指定するインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <summary>通信オブジェクトによって呼び出された close メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>close メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <summary>通信オブジェクトによって呼び出された open メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>open メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <summary>通信オブジェクトによって呼び出された receive メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>receive メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <summary>通信オブジェクトによって呼び出された send メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>send メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IExtensibleObject`1">
      <summary>オブジェクトが、イベントの登録や状態遷移の監視などのカスタム動作に参加できるようにします。</summary>
      <typeparam name="T">拡張クラスの型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <summary>この拡張可能オブジェクトに対する拡張オブジェクトのコレクションを取得します。</summary>
      <returns>拡張オブジェクトの <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IExtension`1">
      <summary>オブジェクトが集約を介して別のオブジェクトを拡張できるようにします。</summary>
      <typeparam name="T">カスタム動作を実装するオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <summary>集約されているときに拡張オブジェクトがそれを認識できるようにします。拡張が <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> プロパティに追加されたときに呼び出されます。</summary>
      <param name="owner">この拡張を集約する拡張可能オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <summary>もう集約されていないことをオブジェクトが認識できるようにします。拡張が <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> プロパティから削除されたときに呼び出されます。</summary>
      <param name="owner">この拡張を集約する拡張可能オブジェクト。</param>
    </member>
    <member name="T:System.ServiceModel.IExtensionCollection`1">
      <summary>
        <see cref="T:System.ServiceModel.IExtension`1" /> を型を指定して取得できるようにする <see cref="T:System.ServiceModel.IExtension`1" /> オブジェクトのコレクション。</summary>
      <typeparam name="T">拡張オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <summary>指定された拡張オブジェクトをコレクション内で検索します。</summary>
      <returns>見つかった拡張オブジェクト。</returns>
      <typeparam name="E">拡張オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <summary>
        <paramref name="E" /> で指定されたすべての拡張オブジェクトをコレクション内で検索します。</summary>
      <returns>コレクション内の指定された型を実装するすべての拡張オブジェクトのコレクション。</returns>
      <typeparam name="E">拡張オブジェクトの型。</typeparam>
    </member>
    <member name="T:System.ServiceModel.InvalidMessageContractException">
      <summary>無効なメッセージ コントラクトを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.InvalidMessageContractException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.InvalidMessageContractException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外のメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用する <see cref="T:System.ServiceModel.InvalidMessageContractException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.MessageBodyMemberAttribute">
      <summary>メンバーが SOAP 本文の中の要素としてシリアル化されることを指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <summary>メンバーがシリアル化される SOAP 本文内の位置を示す値を取得または設定します。</summary>
      <returns>SOAP 本文内の要素の位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">プロパティ Set アクセス操作子に渡された値が負の整数です。</exception>
    </member>
    <member name="T:System.ServiceModel.MessageContractAttribute">
      <summary>SOAP メッセージに対応する厳密に型指定されたクラスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.IsWrapped">
      <summary>メッセージ本文にラッパー要素があるかどうかを指定する値を取得または設定します。</summary>
      <returns>メッセージ本文にラッパー要素がある場合は true、それ以外の場合は false。既定値は、true です。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <summary>メッセージ本文のラッパー要素の名前を取得または設定します。</summary>
      <returns>メッセージ本文のラッパー要素の名前。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <summary>メッセージ本文のラッパー要素の名前空間を取得または設定します。</summary>
      <returns>ラッパー要素の名前空間。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageContractMemberAttribute">
      <summary>
        <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> と <see cref="T:System.ServiceModel.MessageHeaderAttribute" /> の基本メンバーを宣言します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <summary>このメンバーに対応する要素の名前を指定します。</summary>
      <returns>このメンバーに対応する要素の名前。この文字列は、有効な XML 要素名であることが必要です。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <summary>このメンバーに対応する要素の名前空間を指定します。</summary>
      <returns>このメンバーに対応する要素の名前空間の URI。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageCredentialType">
      <summary>有効なメッセージ資格情報の種類を列挙します。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.Certificate">
      <summary>証明書を使用するクライアント認証を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.IssuedToken">
      <summary>発行されたトークンを使用するクライアント認証を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.None">
      <summary>匿名認証を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.UserName">
      <summary>UserName を使用するクライアント認証を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.MessageCredentialType.Windows">
      <summary>Windows を使用するクライアント認証を指定します。</summary>
    </member>
    <member name="T:System.ServiceModel.MessageHeader`1">
      <summary>SOAP ヘッダーの内容を表します。</summary>
      <typeparam name="T">メッセージ ヘッダーの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageHeader`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.#ctor(`0)">
      <summary>指定したヘッダーの内容を使用して、<see cref="T:System.ServiceModel.MessageHeader`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">新しいヘッダーの内容。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)">
      <summary>指定したヘッダーの内容とメタデータを使用して、<see cref="T:System.ServiceModel.MessageHeader`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">新しいヘッダーの内容。</param>
      <param name="mustUnderstand">ヘッダーの認識が必要かどうかを指定する値。</param>
      <param name="actor">メッセージ ヘッダーで対象とされている受信先。</param>
      <param name="relay">ヘッダーの転送が必要かどうかを指定する値。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.Actor">
      <summary>メッセージ ヘッダーの対象受信先を取得または設定します。</summary>
      <returns>メッセージ ヘッダーで対象とされている受信先。既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.Content">
      <summary>ヘッダーの内容を取得または設定します。</summary>
      <returns>ヘッダーの内容。</returns>
    </member>
    <member name="M:System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)">
      <summary>指定した名前空間とローカル名を持つメッセージ ヘッダーを取得します。</summary>
      <returns>指定した名前空間とローカル名を持つメッセージ ヘッダー。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.MustUnderstand">
      <summary>SOAP 1.1/1.2 仕様に従って、ヘッダーを認識する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>ヘッダーを認識する必要がある場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeader`1.Relay">
      <summary>ヘッダーの転送が必要かどうかを示す値を取得します。</summary>
      <returns>ヘッダーを転送する必要がある場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderException">
      <summary>SOAP メッセージを処理するときに、メッセージ ヘッダーに関する想定が満たされないときにスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に含まれるメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <summary>指定したメッセージと、メッセージ ヘッダーが重複しているか失われていることを示す値を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="isDuplicate">複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーが存在しない場合は false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと、例外の原因となった内部例外を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">例外を引き起こした内部例外を格納する <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <summary>指定したメッセージ、ヘッダー名、および名前空間を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>指定したメッセージ、ヘッダー名と名前空間、およびメッセージ ヘッダーが重複しているか失われていることを示す値を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
      <param name="isDuplicate">複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーが存在しない場合は false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <summary>指定したメッセージ、ヘッダー名と名前空間、メッセージ ヘッダーが重複しているか失われていることを示す値、および例外の原因となった内部例外を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
      <param name="isDuplicate">複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーが存在しない場合は false。</param>
      <param name="innerException">例外を引き起こした内部例外を格納する <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>指定したメッセージ、ヘッダー名と名前空間、および例外の原因となった内部例外を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
      <param name="innerException">例外を引き起こした内部例外を格納する <see cref="T:System.Exception" />。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <summary>例外の原因となった SOAP ヘッダーの名前を取得します。</summary>
      <returns>SOAP ヘッダーの名前です。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <summary>例外の原因となった SOAP ヘッダーの名前空間を取得します。</summary>
      <returns>SOAP ヘッダーの名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <summary>複数のメッセージ ヘッダーが存在するか、メッセージ ヘッダーが存在しないかを示す値を取得します。</summary>
      <returns>複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーが存在しない場合は false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageParameterAttribute">
      <summary>要求の名前と応答パラメーターの名前を制御します。<see cref="T:System.ServiceModel.Channels.Message" /> またはメッセージ コントラクトと共に使用することはできません。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageParameterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageParameterAttribute.Name">
      <summary>XML スキーマ (XSD) 内のパラメーターの名前属性を取得または設定します。</summary>
      <returns>XSD 内のパラメーターの名前属性。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContext">
      <summary>サービス メソッドの実行コンテキストへのアクセスを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <summary>クライアント アプリケーション内の指定された <see cref="T:System.ServiceModel.IContextChannel" /> を使用する <see cref="T:System.ServiceModel.OperationContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channel">新しいクライアントの <see cref="T:System.ServiceModel.IContextChannel" /> を作成するために使用される <see cref="T:System.ServiceModel.OperationContext" />。</param>
      <exception cref="T:System.ArgumentNullException">チャネルが null です。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Current">
      <summary>現在のスレッドの実行コンテキストを取得または設定します。</summary>
      <returns>現在のメソッドのメッセージング コンテキストと実行コンテキストを表す <see cref="T:System.ServiceModel.OperationContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Extensions">
      <summary>現在のメッセージ コンテキストからサービス拡張のコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationContext" /> の拡張のコレクション。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <summary>
        <see cref="T:System.ServiceModel.OperationContext" /> の受信メッセージ ヘッダーを取得します。</summary>
      <returns>受信メッセージ ヘッダーを格納する <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <summary>
        <see cref="T:System.ServiceModel.OperationContext" /> 内の受信メッセージのメッセージ プロパティを取得します。</summary>
      <returns>受信メッセージのメッセージ プロパティを格納する <see cref="T:System.ServiceModel.Channels.MessageProperties" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <summary>
        <see cref="T:System.ServiceModel.OperationContext" /> の受信 SOAP メッセージのバージョンを取得します。</summary>
      <returns>受信メッセージの SOAP バージョン。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IsUserContext">
      <summary>このプロパティはシステムによる使用を目的としています。ユーザーが呼び出すためのものではありません。</summary>
      <returns>true.</returns>
    </member>
    <member name="E:System.ServiceModel.OperationContext.OperationCompleted">
      <summary>操作の完了時に発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <summary>アクティブな <see cref="T:System.ServiceModel.OperationContext" /> の送信メッセージ ヘッダーを取得します。</summary>
      <returns>アクティブな <see cref="T:System.ServiceModel.OperationContext" /> の送信メッセージ ヘッダーを格納する <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <summary>アクティブな <see cref="T:System.ServiceModel.OperationContext" /> 内の送信メッセージのメッセージ プロパティを取得します。</summary>
      <returns>送信メッセージのメッセージ プロパティを格納する <see cref="T:System.ServiceModel.Channels.MessageProperties" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.RequestContext">
      <summary>このメソッドの <see cref="T:System.ServiceModel.Channels.RequestContext" /> 実装を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.RequestContext" /> の実装。要求コンテキストがない場合は null。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContextScope">
      <summary>スコープに <see cref="T:System.ServiceModel.OperationContext" /> オブジェクトが含まれるブロックを作成します。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <summary>指定した <see cref="T:System.ServiceModel.IContextChannel" /> を使用して新しい <see cref="T:System.ServiceModel.OperationContext" /> のスコープを作成する <see cref="T:System.ServiceModel.OperationContextScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channel">新しい <see cref="T:System.ServiceModel.OperationContext" /> のスコープを作成するときに使用するチャネル。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <summary>指定した <see cref="T:System.ServiceModel.OperationContext" /> オブジェクトのスコープを作成する <see cref="T:System.ServiceModel.OperationContextScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">作成されたスコープのアクティブな <see cref="T:System.ServiceModel.OperationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.Dispose">
      <summary>元の <see cref="T:System.ServiceModel.OperationContext" /> をアクティブなコンテキストに復元し、<see cref="T:System.ServiceModel.OperationContextScope" /> オブジェクトをリサイクルします。</summary>
    </member>
    <member name="T:System.ServiceModel.OperationContractAttribute">
      <summary>メソッドが、Windows Communication Foundation (WCF) アプリケーションのサービス コントラクトの一部である操作を定義することを示します。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.OperationContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Action">
      <summary>要求メッセージの WS-Addressing アクションを取得または設定します。</summary>
      <returns>WS-Addressing アクション ヘッダーの生成で使用するアクション。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <summary>サービス コントラクト内で Begin&lt;methodName&gt; メソッドと End&lt;methodName&gt; メソッドのペアを使用して、操作が非同期的に実装されることを示します。</summary>
      <returns>Begin&lt;methodName&gt; メソッドが End&lt;methodName&gt; メソッドと一致し、サービス インターフェイス上で非同期のメソッド ペアとして実装される操作としてインフラストラクチャで処理可能である場合は true、それ以外の場合は false。既定値は、false です。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <summary>操作が応答メッセージを返すかどうかを示す値を取得または設定します。</summary>
      <returns>このメソッドが要求メッセージを受け取り、応答メッセージを返さない場合は true、それ以外の場合は false。既定値は、false です。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Name">
      <summary>操作の名前を取得または設定します。</summary>
      <returns>操作の名前。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <summary>操作の応答メッセージの SOAP アクションの値を取得または設定します。</summary>
      <returns>応答メッセージの SOAP アクションの値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> は null なので、</exception>
    </member>
    <member name="T:System.ServiceModel.OperationFormatStyle">
      <summary>サービスの WSDL メタデータの書式設定方法を決定する SOAP スタイルを表します。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Document">
      <summary>WSDL 表現に、操作で交換されるドキュメントを表す単一の要素が含まれるようにします。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <summary>メッセージの WSDL 表現を操作で交換されるようにし、リモート プロシージャ コールであるかのようにパラメーターが含まれるようにします。</summary>
    </member>
    <member name="T:System.ServiceModel.ProtocolException">
      <summary>クライアントに示される例外で、データ転送プロトコルが一致しないためにリモート側と通信できない場合にスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ProtocolException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.ProtocolException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.QuotaExceededException">
      <summary>メッセージ クォータを超過した場合にスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.QuotaExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.QuotaExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.SecurityMode">
      <summary>バインドのセキュリティ設定を決定します。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.Message">
      <summary>セキュリティは、SOAP メッセージ セキュリティを使用して確保されます。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.None">
      <summary>セキュリティを無効にします。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.Transport">
      <summary>セキュリティは、セキュア トランスポート (HTTPS など) を使用して確保されます。</summary>
    </member>
    <member name="F:System.ServiceModel.SecurityMode.TransportWithMessageCredential">
      <summary>セキュア トランスポート (HTTPS など) は整合性、機密性、および認証を提供し、SOAP メッセージ セキュリティはクライアント認証を提供します。</summary>
    </member>
    <member name="T:System.ServiceModel.ServerTooBusyException">
      <summary>サーバーがビジーでメッセージを受信できない場合にスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ServerTooBusyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.ServerTooBusyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceActivationException">
      <summary>サービスがアクティブにならない場合にスローされる例外です。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ServiceActivationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと内部例外を使用して、<see cref="T:System.ServiceModel.ServiceActivationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceContractAttribute">
      <summary>インターフェイスまたはクラスが、Windows Communication Foundation (WCF) アプリケーション内にサービス コントラクトを定義することを示します。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
      <summary>コントラクトが双方向コントラクトの場合のコールバック コントラクトの型を取得または設定します。</summary>
      <returns>コールバック コントラクトを示す <see cref="T:System.Type" />。既定値は、null です。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <summary>アプリケーション構成ファイル内でサービスを検索するために使用される名前を取得または設定します。</summary>
      <returns>アプリケーション構成ファイル内でサービス要素を検索するために使用される名前。既定の名前は、サービス実装クラスの名前です。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Name">
      <summary>Web サービス記述言語 (WSDL) での &lt;portType&gt; 要素の名前を取得または設定します。</summary>
      <returns>既定値は <see cref="T:System.ServiceModel.ServiceContractAttribute" /> が適用されたクラスまたはインターフェイスの名前です。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <summary>Web サービス記述言語 (WSDL) での &lt;portType&gt; 要素の名前空間を取得または設定します。</summary>
      <returns>&lt;portType&gt; 要素の WSDL 名前空間。既定値は "http://tempuri.org" です。</returns>
    </member>
    <member name="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <summary>シリアル化または逆シリアル化するときに、サービスによって使用される既知の型を指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> クラスの新しいインスタンスを初期化し、既知の型を返すメソッドの名前を指定します。</summary>
      <param name="methodName">既知の型を返すメソッドの名前。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <summary>既知の型を返すメソッドの名前と、既知の型を返すメソッドを含む型を指定して、<see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="methodName">既知の型を返すメソッドの名前。</param>
      <param name="declaringType">オブジェクト グラフの中で既知の型を使用できる型。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <summary>指定した既知の型を使用して <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">サービスによって定義されるパラメーターまたは戻り値の中で使用できる既知の型を指定します。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <summary>既知の型を返すメソッドを含む型を取得します。</summary>
      <returns>既知の型を返すメソッドを含む <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <summary>既知の型のコレクションを返すメソッドの名前を取得します。</summary>
      <returns>既知の型を返すメソッドの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <summary>オブジェクト グラフに含めることができる既知の型。</summary>
      <returns>既知の型の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.TransferMode">
      <summary>チャネルが要求メッセージと応答メッセージの転送でストリーミング モードとバッファー モードのどちらを使用するかを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.Buffered">
      <summary>要求メッセージと応答メッセージの両方をバッファーします。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.Streamed">
      <summary>要求メッセージと応答メッセージの両方をストリーミングします。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.StreamedRequest">
      <summary>要求メッセージをストリーミングし、応答メッセージをバッファーします。</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.StreamedResponse">
      <summary>要求メッセージをバッファーし、応答メッセージをストリーミングします。</summary>
    </member>
    <member name="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <summary>チャネルで受信したメッセージで、どのコールバック操作または保留要求にも関連付けることができないメッセージを含みます。</summary>
    </member>
    <member name="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <summary>イベントの原因となった不明のメッセージを取得します。</summary>
      <returns>イベントの原因となった <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="T:System.ServiceModel.XmlSerializerFormatAttribute">
      <summary>Windows Communication Foundation (WCF) インフラストラクチャに対して、<see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> の代わりに <see cref="T:System.Xml.Serialization.XmlSerializer" /> を使用するように指示します。</summary>
    </member>
    <member name="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.XmlSerializerFormatAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.XmlSerializerFormatAttribute.Style">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> の SOAP スタイルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationFormatStyle" /> 値のいずれか。既定値は、<see cref="F:System.ServiceModel.OperationFormatStyle.Document" /> です。</returns>
    </member>
    <member name="P:System.ServiceModel.XmlSerializerFormatAttribute.SupportFaults">
      <summary>エラーの読み書きに <see cref="T:System.Xml.Serialization.XmlSerializer" /> を使用する必要があることを示す値を取得または設定します。</summary>
      <returns>エラーの読み書きに <see cref="T:System.Xml.Serialization.XmlSerializer" /> を使用する必要がある場合は true。<see cref="T:System.Runtime.Serialization.DataContractSerializer" /> を使用する場合は false。既定値は、false です。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeader">
      <summary>エンドポイントの識別またはエンドポイントとの対話のために使用されるアドレス情報項目をカプセル化するヘッダーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.AddressHeader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object)">
      <summary>指定した値、名前、および名前空間を使用して、<see cref="T:System.ServiceModel.Channels.AddressHeader" /> クラスの新しいインスタンスを作成します。</summary>
      <returns>
        <paramref name="value" /> で指定された情報を格納する、指定した <paramref name="name" /> および <paramref name="ns" /> を持つ <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">アドレス ヘッダーの名前。</param>
      <param name="ns">アドレス ヘッダーの名前空間。</param>
      <param name="value">アドレス ヘッダーの情報項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null または <paramref name="name" />.Length == 0 です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定した名前と、指定したフォーマッタを使用して指定したオブジェクトからの情報項目をシリアル化する指定した名前空間を使用して、<see cref="T:System.ServiceModel.Channels.AddressHeader" /> クラスの新しいインスタンスを作成します。</summary>
      <returns>
        <paramref name="value" /> で指定された情報を格納する、指定した <paramref name="name" /> および <paramref name="ns" /> を持つ <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">アドレス ヘッダーの名前。</param>
      <param name="ns">アドレス ヘッダーの名前空間。</param>
      <param name="value">アドレス ヘッダーの情報項目。</param>
      <param name="serializer">
        <paramref name="value" /> パラメーターで指定したオブジェクトのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="serializer" /> が null です。または、<paramref name="name" />.Length == 0 です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.Equals(System.Object)">
      <summary>指定したオブジェクト内の情報項目が現在のアドレス ヘッダーに格納されているオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定した <paramref name="obj" /> の情報項目が現在のアドレス ヘッダーに格納されている情報項目と等しい場合は true、それ以外の場合は false。特に、<paramref name="obj" /> が null の場合は、false を返します。</returns>
      <param name="obj">現在のアドレス ヘッダーに格納されているオブジェクトと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetAddressHeaderReader">
      <summary>現在のアドレス ヘッダー オブジェクトをシリアル化できる XML リーダーを返します。</summary>
      <returns>現在のアドレス ヘッダー オブジェクトをシリアル化できる <see cref="T:System.Xml.XmlDictionaryReader" /> のインスタンス。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetHashCode">
      <summary>アドレス ヘッダーに対する一意のハッシュ コードを提供します。</summary>
      <returns>現在のアドレス ヘッダーに対する一意のハッシュ コード。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1">
      <summary>現在のアドレス ヘッダーの情報項目を指定した型のオブジェクトに逆シリアル化します。</summary>
      <returns>フィールドおよびプロパティが、現在のアドレス ヘッダー オブジェクトによって提供された値に設定されている、<paramref name="T" /> 型のクラスのインスタンス。</returns>
      <typeparam name="T">フィールドおよびプロパティが、現在のアドレス ヘッダー オブジェクトによって提供された値に設定されている <paramref name="T" /> 型のクラス。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>現在のアドレス ヘッダーの情報項目を、この情報をシリアル化するために指定したフォーマッタを使用する、指定した型のオブジェクトに逆シリアル化します。</summary>
      <returns>フィールドおよびプロパティが、現在のアドレス ヘッダー オブジェクトによって提供された値に設定されている、<paramref name="T" /> 型のクラスのインスタンス。</returns>
      <param name="serializer">現在のアドレス ヘッダー オブジェクトから情報項目を逆シリアル化するために使用する <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">フィールドおよびプロパティが、現在のアドレス ヘッダー オブジェクトによって提供された値に設定されている <paramref name="T" /> 型のクラス。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> は null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Name">
      <summary>実装された場合、アドレス ヘッダーの名前を取得します。</summary>
      <returns>アドレス ヘッダーの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Namespace">
      <summary>実装された場合、アドレス ヘッダーの名前空間を取得します。</summary>
      <returns>アドレス ヘッダーの名前空間。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>派生クラスでオーバーライドされた場合、アドレス ヘッダーの内容がストリームまたはファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">アドレス ヘッダーの内容をストリームまたはファイルに書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>派生クラスでオーバーライドされた場合、ストリームまたはファイルへのアドレス ヘッダーの内容の書き込みが開始すると呼び出されます。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルに書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.ToMessageHeader">
      <summary>アドレス ヘッダーをメッセージ ヘッダーとしてラップします。</summary>
      <returns>現在のアドレス ヘッダーをラップする <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して、ストリームまたはファイルにアドレス ヘッダーを書き込みます。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルに書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> を使用して、ストリームまたはファイルにアドレス ヘッダーを書き込みます。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルに書き込むために使用される <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>アドレス ヘッダーの内容をストリームまたはファイルに書き込みます。</summary>
      <param name="writer">アドレス ヘッダーの内容をストリームまたはファイルに書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>ストリームまたはファイルへのアドレス ヘッダーの内容の書き込みを開始します。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルに書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeaderCollection">
      <summary>アドレス ヘッダーの、スレッド セーフで読み取り専用のコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.AddressHeader})">
      <summary>アドレス ヘッダーの列挙可能なセットを使用して、<see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="addressHeaders">コレクションの初期化に使用する <see cref="T:System.ServiceModel.Channels.AddressHeader" /> オブジェクトの <see cref="T:System.Collections.Generic.IEnumerable`1" /> セット。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="addressHeaders" /> パラメーターのいずれかのアドレス ヘッダーが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.AddHeadersTo(System.ServiceModel.Channels.Message)">
      <summary>コレクション内のヘッダーを、指定したメッセージのヘッダーに追加します。</summary>
      <param name="message">ヘッダーを追加する <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindAll(System.String,System.String)">
      <summary>コレクション内で、指定した名前と名前空間を持つすべてのアドレス ヘッダーを検索します。</summary>
      <returns>コレクション内に存在する、指定した名前と名前空間を持つすべてのアドレス ヘッダーが格納された、<see cref="T:System.ServiceModel.Channels.AddressHeader" /> 型の <see cref="T:System.Array" />。</returns>
      <param name="name">検索されるアドレス ヘッダーの名前。</param>
      <param name="ns">検索されるアドレス ヘッダーの名前空間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindHeader(System.String,System.String)">
      <summary>コレクション内で、指定した名前と名前空間を持つ最初のアドレス ヘッダーを検索します。</summary>
      <returns>コレクション内に存在する、指定した名前と名前空間を持つ <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">検索されるアドレス ヘッダーの名前。</param>
      <param name="ns">検索されるアドレス ヘッダーの名前空間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">指定した <paramref name="name" /> と <paramref name="ns" /> を持つヘッダーが複数存在します。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressingVersion">
      <summary>SOAP メッセージに関連付けられている WS-Addressing のバージョン、またはエンドポイントが認識する WS-Addressing のバージョン。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.None">
      <summary>WS-Addressing バージョンに関連付けられていないアドレシング バージョンを取得します。</summary>
      <returns>関連付けられている WS-Addressing バージョンではない <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressingVersion.ToString">
      <summary>現在のアドレス バージョンの文字列形式を返します。</summary>
      <returns>現在のアドレス バージョンを表す文字列。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.WSAddressing10">
      <summary>WS-Addressing 1.0 に関連付けられているアドレス バージョンの識別子を取得します。</summary>
      <returns>WS-Addressing 1.0 に関連付けられている <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> を識別するシングルトン インスタンス。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement">
      <summary>メッセージをエンコードするために使用される .NET Binary Format for XML を指定するバインド要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定したコンテキストに対して指定した種類のチャネルを作成するチャネル ファクトリ スタックをクライアント上に作成します。</summary>
      <returns>指定したコンテキストの <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">チャネルの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.Clone">
      <summary>新しい <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> オブジェクトを作成し、現在のオブジェクトを使用して初期化します。</summary>
      <returns>現在の要素と同じプロパティ値が設定された <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CompressionFormat">
      <summary>バインディング要素の圧縮形式を取得または設定します。</summary>
      <returns>バインディング要素の圧縮形式。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>現在のエンコーディング バインド要素で指定されている SOAP および WS-Addressing のバージョンと文字エンコーディングを使用する、バイナリ メッセージ エンコーダー用のファクトリを作成します。</summary>
      <returns>このバインド要素が作成する <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>バインド要素スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <param name="context">バインド要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MaxSessionSize">
      <summary>送信手順を最適化するためにセッション内で利用できるメモリの最大量を取得または設定します。</summary>
      <returns>セッションの最大サイズ (バイト単位)。既定値は 2048 バイトです。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 以下です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MessageVersion">
      <summary>使用または要求されている SOAP メッセージおよび WS-Addressing のバージョンを取得または設定します。</summary>
      <returns>使用または要求されている <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <exception cref="T:System.ArgumentNullException">設定値は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定されている値は、サポートされないエンベロープ バージョンです。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.ReaderQuotas">
      <summary>このバインド要素を使用して設定されるエンドポイントにより処理可能な、XML メッセージの複雑さに対する制約を取得します。</summary>
      <returns>交換される SOAP メッセージに対する複雑さの制約を指定する <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。これらの制約の既定値については、後の「解説」で説明します。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.Binding">
      <summary>クライアントとサービスの間の通信に使用するプロトコル、トランスポート、およびメッセージ エンコーダーを指定するバインド要素を格納します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor">
      <summary>既定の名前と名前空間を使用して、<see cref="T:System.ServiceModel.Channels.Binding" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor(System.String,System.String)">
      <summary>サービスの指定したバインドを使用して、<see cref="T:System.ServiceModel.Channels.Binding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">バインドの <see cref="P:System.ServiceModel.Channels.Binding.Name" />。</param>
      <param name="ns">バインドの <see cref="P:System.ServiceModel.Channels.Binding.Namespace" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> は、null または空の文字列です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ns" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])">
      <summary>指定した種類のチャネルを作成し、オブジェクト配列で指定されている機能を満たすチャネル ファクトリ スタックを、クライアント上に構築します。</summary>
      <returns>コレクションによって指定される機能を満たす <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="parameters">作成されるチャネル ファクトリの要件を指定するオブジェクト配列。</param>
      <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの種類。</typeparam>
      <exception cref="T:System.InvalidOperationException">トランスポート要素がないか、トランスポート要素の順序が正しくないか、スキームが無効であるか、またはメッセージのバージョンが指定されていません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>指定した種類のチャネルを作成し、バインド パラメーターのコレクションで指定されている機能を満たすチャネル ファクトリ スタックを、クライアント上に構築します。</summary>
      <returns>コレクションによって指定される機能を満たす <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="parameters">作成されるチャネル ファクトリの要件を指定する <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの種類。</typeparam>
      <exception cref="T:System.InvalidOperationException">トランスポート要素がないか、トランスポート要素の順序が正しくないか、スキームが無効であるか、またはメッセージのバージョンが指定されていません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])">
      <summary>オブジェクト配列で指定した要件を満たすチャネル ファクトリ スタックを、現在のバインドがクライアント上に構築できるかどうかを示す値を返します。</summary>
      <returns>指定したチャネル ファクトリ スタックをクライアントに作成できる場合は true、それ以外の場合は false。</returns>
      <param name="parameters">作成されるチャネル ファクトリの要件を指定するオブジェクト配列。</param>
      <typeparam name="TChannel">ファクトリがテストされているチャネルの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>指定したバインド パラメーターのコレクションを満たすチャネル ファクトリ スタックを、現在のバインドがクライアント上に構築できるかどうかを示す値を返します。</summary>
      <returns>指定したチャネル ファクトリ スタックをクライアントに作成できる場合は true、それ以外の場合は false。</returns>
      <param name="parameters">作成するチャネル ファクトリの要件を指定する <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">ファクトリがテストされているチャネルの種類。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.CloseTimeout">
      <summary>接続の終了を待機する時間間隔を取得および設定します。これを超えるとトランスポートで例外が発生します。</summary>
      <returns>クローズ操作がタイムアウトになるまでの時間を表す <see cref="T:System.Timespan" />。既定値は 1 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満か、または大きすぎます。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
      <summary>派生クラスでオーバーライドされると、現在のバインドの一部であるバインド要素を格納するコレクションを作成します。</summary>
      <returns>現在のバインド オブジェクトのバインド要素を正しい順序で格納する、<see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>バインド スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <param name="parameters">作成されるチャネル リスナーの要件を指定する <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.MessageVersion">
      <summary>バインドで構成されるクライアントとサービスが使用するメッセージ バージョンを取得します。</summary>
      <returns>バインドで構成されるクライアントとサービスが使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Name">
      <summary>バインドの名前を取得または設定します。</summary>
      <returns>バインドの名前。既定の名前は null です。</returns>
      <exception cref="T:System.ArgumentException">設定する値には、null も空の文字列も指定できません。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Namespace">
      <summary>バインドの XML 名前空間を取得または設定します。</summary>
      <returns>バインドの XML 名前空間。既定値は "http://tempuri.org/" です。</returns>
      <exception cref="T:System.ArgumentNullException">設定する値を null にすることはできません。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.OpenTimeout">
      <summary>接続の確立を待機する時間間隔を取得および設定します。これを超えるとトランスポートで例外が発生します。</summary>
      <returns>オープン操作がタイムアウトになるまでの時間を表す <see cref="T:System.Timespan" />。既定値は 1 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満か、または大きすぎます。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.ReceiveTimeout">
      <summary>アプリケーション メッセージが受信されない間に、接続が非アクティブになってから切断されるまでの時間を取得または設定します。</summary>
      <returns>アプリケーションでメッセージを受信する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。既定値は 10 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満か、または大きすぎます。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Scheme">
      <summary>派生クラスとして実装された場合、バインドによって作成されるチャネルおよびリスナー ファクトリが使用するトランスポートを指定する URI スキームを設定します。</summary>
      <returns>現在のバインドによって構築されるファクトリが作成するチャネルまたはリスナーが使用する URI スキーム。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.SendTimeout">
      <summary>書き込み操作の完了を待機する時間間隔を取得および設定します。これを超えるとトランスポートで例外が発生します。</summary>
      <returns>書き込み操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。既定値は 1 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満か、または大きすぎます。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingContext">
      <summary>チャネル リスナーとチャネル ファクトリを作成するために必要な、アドレス、バインド、バインド要素、およびバインド パラメーターに関する情報を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>バインドおよびバインド パラメーターのコレクションを指定して、<see cref="T:System.ServiceModel.Channels.BindingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">チャネルの <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</param>
      <param name="parameters">チャネルの <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> は null なので、</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.Binding">
      <summary>現在のコンテキストに組み込まれているチャネルのバインドを取得します。</summary>
      <returns>現在のコンテキストに組み込まれているチャネルの <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.BindingParameters">
      <summary>現在のコンテキストに組み込まれているチャネルのバインド パラメーターのコレクションを取得します。</summary>
      <returns>現在のコンテキストに組み込まれているチャネルの <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1">
      <summary>現在のチャネル ファクトリの下に、指定した型のチャネルの内部チャネル ファクトリを作成します。</summary>
      <returns>現在のチャネル ファクトリの内部チャネル ファクトリを表す <see cref="T:System.ServiceModel.Channels.IChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <typeparam name="TChannel">内部チャネル ファクトリが生成する <see cref="T:System.ServiceModel.Channels.IChannel" /> オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelFactory``1">
      <summary>内部チャネル ファクトリが指定した型のチャネルを作成できるかどうかを示す値を返します。</summary>
      <returns>内部チャネル ファクトリが、指定された <paramref name="TChannel" /> を作成できる場合は true。それ以外の場合は false。</returns>
      <typeparam name="TChannel">内部チャネル ファクトリが生成する <see cref="T:System.ServiceModel.Channels.IChannel" /> オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.Clone">
      <summary>現在のチャネル ビルド コンテキストのコピーを返します。</summary>
      <returns>現在のチャネル ビルド コンテキストのコピーである <see cref="T:System.ServiceModel.Channels.BindingContext" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.GetInnerProperty``1">
      <summary>バインド スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.RemainingBindingElements">
      <summary>チャネル スタックを作成するために他のバインド要素によって使用されるバインド要素を取得します。</summary>
      <returns>チャネル スタックを作成するために他のバインド要素によって使用されるバインド要素が格納されている <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElement">
      <summary>送信および受信メッセージの処理に使用されるさまざまな種類のチャネルのチャネル ファクトリとチャネル リスナーを作成するバインドの要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor(System.ServiceModel.Channels.BindingElement)">
      <summary>指定したバインド要素を使用して、<see cref="T:System.ServiceModel.Channels.BindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elementToBeCloned">複製する <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定した種類のチャネルを生成するよう、バインド コンテキストからチャネル ファクトリを初期化します。</summary>
      <returns>
        <paramref name="context" /> から初期化される <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">バインド要素のコンテキストを提供する <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">ファクトリが作成するチャネルの種類。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>バインド要素が特定の型のチャネルのチャネル ファクトリを作成できるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> がバインド要素によって作成できる場合は true。それ以外の場合は false。</returns>
      <param name="context">バインド要素のコンテキストを提供する <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの種類。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.Clone">
      <summary>派生クラスでオーバーライドされると、バインド要素オブジェクトのコピーを返します。</summary>
      <returns>オリジナルのディープ クローンである <see cref="T:System.ServiceModel.Channels.BindingElement" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>派生クラスでオーバーライドされると、バインド スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <param name="context">バインド要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElementCollection">
      <summary>バインドで使用されるバインド要素のコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>バインド要素の列挙可能なセットを使用して、<see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elements">コレクションを初期化するために使用するジェネリック型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>バインド要素の配列を使用して <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elements">コレクションを初期化するために使用する <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.AddRange(System.ServiceModel.Channels.BindingElement[])">
      <summary>バインド要素のコレクションに配列のバインド要素を追加します。</summary>
      <param name="elements">コレクションに追加する <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Clone">
      <summary>バインド要素のコレクションのコピーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> のコピー。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Contains(System.Type)">
      <summary>指定した型のバインド要素がバインド要素のコレクションに属しているかどうかを示す値を返します。</summary>
      <returns>指定した型のバインド要素がコレクションに含まれる場合は true、それ以外の場合は false。</returns>
      <param name="bindingElementType">コレクションに含まれるかどうかをテストするバインド要素の型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementType" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Find``1">
      <summary>バインド要素のコレクションから、指定した型の最初の項目を返します。</summary>
      <returns>
        <see cref="T:System.Type" /> 型の項目が見つかった場合はその項目。見つからない場合は、<paramref name="T" /> が値型の場合は 0、<paramref name="T" /> が参照型の場合は null。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.FindAll``1">
      <summary>バインド要素のコレクションから、指定した型のすべての項目を返します。</summary>
      <returns>見つかった場合は、<see cref="T:System.Type" /> 型の全項目の <see cref="T:System.Collections.ObjectModel.Collection`1" />。見つからない場合は、<paramref name="T" /> が値型の場合は 0、<paramref name="T" /> が参照型の場合は null。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.InsertItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>バインド要素のコレクションの指定した位置に、バインド要素を挿入します。</summary>
      <param name="index">コレクション内にバインド要素を挿入する位置。</param>
      <param name="item">挿入する <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Remove``1">
      <summary>バインド要素のコレクションから、指定した型のバインド要素を削除します。</summary>
      <returns>削除された <see cref="T:System.Type" /> 型の項目。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.RemoveAll``1">
      <summary>バインド要素のコレクションから、指定した型のすべてのバインド要素を削除します。</summary>
      <returns>見つかった <see cref="T:System.Type" /> 型の全項目の <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.SetItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>バインド要素のコレクション内の指定したインデックス位置にあるバインド要素を置換します。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定した <paramref name="index" /> に存在する <see cref="T:System.ServiceModel.Channels.BindingElement" /> 項目の新しい値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> は null なので、</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingParameterCollection">
      <summary>ファクトリの作成にバインド要素が使用する情報を格納したバインド パラメーターのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.GetKeyForItem(System.Object)">
      <summary>コレクション内に格納されている項目のキーを取得します。</summary>
      <returns>コレクション内の指定した <paramref name="item" /> のキーを表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <param name="item">キーを取得するコレクション内の項目。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>このコレクションの指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> が挿入されるコレクション内の位置を示す 0 から始まるインデックス。</param>
      <param name="item">コレクションに挿入するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>指定したインデックス位置の項目を、新しいオブジェクトで置き換えます。</summary>
      <param name="index">新しい <paramref name="item" /> を設定する位置を示す 0 から始まるインデックス。</param>
      <param name="item">コレクションに設定するオブジェクト。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.BodyWriter">
      <summary>メッセージ本文のライターを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.#ctor(System.Boolean)">
      <summary>バッファーを行うかどうかを明示的に示す <see cref="T:System.ServiceModel.Channels.BodyWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="isBuffered">本文ライターを複数回呼び出すことができる場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.CreateBufferedCopy(System.Int32)">
      <summary>本文のバッファーされたコピーを作成します。</summary>
      <returns>このオブジェクトのコピーを格納している <see cref="T:System.ServiceModel.Channels.BodyWriter" />。</returns>
      <param name="maxBufferSize">本文用のバッファーの最大サイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferSize" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">本文は既に書き込まれており、再び書き込むことはできません。または、本文ライターがバッファーされていません。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BodyWriter.IsBuffered">
      <summary>書き込みメソッドを複数回呼び出すことができるかどうかを示す値を取得します。</summary>
      <returns>本文ライターを複数回呼び出すことができる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnCreateBufferedCopy(System.Int32)">
      <summary>本文の内容を書き込むときの機能拡張ポイントを提供します。</summary>
      <returns>指定した最大バッファサイズの <see cref="T:System.ServiceModel.Channels.BodyWriter" />。</returns>
      <param name="maxBufferSize">本文用のバッファーの最大サイズ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>実装すると、本文の内容を書き込むときの機能拡張ポイントを提供します。</summary>
      <param name="writer">メッセージ本文の書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ本文の内容を書き出します。</summary>
      <param name="writer">メッセージ本文の書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null なので、</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BufferManager">
      <summary>Windows Communication Foundation (WCF) の多くの機能ではバッファーを使用する必要がありますが、バッファーの作成と破棄には手間がかかります。バッファー プールの管理には、<see cref="T:System.ServiceModel.Channels.BufferManager" /> クラスを使用できます。プールとそのバッファーは、このクラスをインスタンス化すると作成され、バッファー プールがガベージ コレクションによりクリアされると破棄されます。バッファーを使用する必要があるときはいつでも、バッファーをプールから取得して使用し、終わったらプールに戻します。バッファーを使用する必要があるたびにバッファーを作成して破棄するよりも、このプロセスの方がはるかに高速です。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BufferManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.Clear">
      <summary>現在マネージャーにキャッシュされているバッファーを解放します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.CreateBufferManager(System.Int64,System.Int32)">
      <summary>指定した最大バッファー プール サイズと、プール内の各個別バッファーの最大サイズを使用して、新しい BufferManager を作成します。</summary>
      <returns>指定したパラメーターを使用して <see cref="T:System.ServiceModel.Channels.BufferManager" /> オブジェクトを返します。</returns>
      <param name="maxBufferPoolSize">プールの最大サイズ。</param>
      <param name="maxBufferSize">個別のバッファーの最大サイズ。</param>
      <exception cref="T:System.InsufficientMemoryException">Windows ストア アプリのための .NET または汎用性のあるクラス ライブラリで、基本クラスの例外 <see cref="T:System.OutOfMemoryException" /> を代わりにキャッチします。十分なメモリがないため、要求されたバッファー プールを作成できませんでした。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferPoolSize" /> または <paramref name="maxBufferSize" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.ReturnBuffer(System.Byte[])">
      <summary>バッファーをプールに返します。</summary>
      <param name="buffer">返すバッファーへの参照。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> の参照に null を指定することはできません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> の長さが、プールのバッファー長プロパティと一致しません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.TakeBuffer(System.Int32)">
      <summary>指定したサイズを下限としたバッファーをプールから取得します。</summary>
      <returns>要求したバッファー サイズのバイト配列。</returns>
      <param name="bufferSize">要求するバッファーのサイズ (バイト単位)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> は 0 未満には設定できません。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelBase">
      <summary>カスタム チャネルの基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.#ctor(System.ServiceModel.Channels.ChannelManagerBase)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelBase" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channelManager">チャネルの操作 (送信、受信、オープン、クローズ) に対する既定のタイムアウトを提供する <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelManager" /> は null なので、</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout">
      <summary>クローズ操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>クローズ操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout">
      <summary>オープン操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>オープン操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout">
      <summary>受信操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>受信操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout">
      <summary>送信操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>送信操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.GetProperty``1">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.Manager">
      <summary>現在のチャネルと関連付けられているチャネル マネージャーを取得します。</summary>
      <returns>現在のチャネルに関連付けられた <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.OnClosed">
      <summary>クローズ状態に移行する間に、診断トレースを使用します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>通信オブジェクトによって呼び出された close メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>close メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>通信オブジェクトによって呼び出された open メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>open メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>通信オブジェクトによって呼び出された receive メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>receive メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>通信オブジェクトによって呼び出された send メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>send メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase">
      <summary>すべてのカスタム チャネル ファクトリに対する共通の基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>指定した既定の通信タイムアウトを使用して、<see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="timeouts">メッセージを交換するときの、開く、送信、受信、および閉じる操作の既定のタイムアウトを指定する <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultCloseTimeout">
      <summary>クローズ操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>クローズ操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultOpenTimeout">
      <summary>オープン操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>オープン操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultReceiveTimeout">
      <summary>受信操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>受信操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultSendTimeout">
      <summary>送信操作が完了するまで待機する既定の時間を取得します。</summary>
      <returns>送信操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty``1">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求される型指定されたオブジェクト T がある場合はそのオブジェクト。ない場合は null。</returns>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnAbort">
      <summary>同期中止操作の呼び出しにより通信オブジェクトが終了状態に遷移した後で、通信オブジェクトに処理を挿入します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>ファクトリが作成した各チャネルを閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">クローズ操作を完了する必要がある制限時間を指定する <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</param>
      <param name="callback">クローズ完了に対する非同期操作の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnClose(System.TimeSpan)">
      <summary>指定した時間内に完了する必要がある開始状態に通信オブジェクトが遷移した後で、通信オブジェクトに処理を挿入します。</summary>
      <param name="timeout">クローズ操作を完了する必要がある制限時間を指定する <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnEndClose(System.IAsyncResult)">
      <summary>ファクトリが開いたチャネルを閉じるための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase`1">
      <summary>指定したアドレスに接続する指定した種類のチャネルを作成するための、クライアント上のチャネル ファクトリに対する共通の基本実装を提供します。</summary>
      <typeparam name="TChannel">ファクトリが作成するチャネルの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>指定した既定の通信タイムアウトを使用して、<see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="timeouts">メッセージを交換するときの、開く、送信、受信、および閉じる操作の既定のタイムアウトを指定する <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>指定したエンドポイント アドレスで特定の種類のチャネルを作成します。</summary>
      <returns>指定した <paramref name="address" /> を使用する <paramref name="TChannel" /> 型のチャネル。</returns>
      <param name="address">チャネルでのメッセージの送信先となるリモート エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>指定したトランスポートとエンドポイント アドレスで、特定の種類のチャネルを作成します。</summary>
      <returns>指定したリモート アドレスとトランスポート アドレスを使用する、<paramref name="TChannel" /> 型のチャネル。</returns>
      <param name="address">チャネルでのメッセージの送信先となるリモート エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">出力チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnAbort">
      <summary>チャネル ファクトリによって管理されている各チャネルを中止します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>チャネル ファクトリに関連付けられているすべてのチャネルを、指定した時間内に閉じる非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">終了時の操作がタイムアウトまでに完了する必要がある時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">終了時操作の非同期完了の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期終了時操作に関連付けられている状態情報を保持するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnClose(System.TimeSpan)">
      <summary>チャネル ファクトリに関連付けられているすべてのチャネルを指定した時間内に閉じます。</summary>
      <param name="timeout">終了時の操作がタイムアウトまでに完了する必要がある時間を指定する <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>派生クラスとして実装された場合、チャネルを作成するときの機能拡張ポイントを提供します。</summary>
      <returns>指定したアドレスを使用する <paramref name="TChannel" /> 型のチャネル。</returns>
      <param name="address">チャネルでのメッセージの送信先となるリモート エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">出力チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnEndClose(System.IAsyncResult)">
      <summary>チャネル ファクトリに関連付けられているすべてのチャネルを、指定した時間内に閉じる非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.ValidateCreateChannel">
      <summary>チャネル ファクトリが開かれていてチャネルを作成できる状態であることを確認します。</summary>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態にあります。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態にあります。</exception>
      <exception cref="T:System.InvalidOperationException">現在のチャネル ファクトリは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態ではありません。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelManagerBase">
      <summary>チャネルおよびリスナー ファクトリと関連付ける、既定のタイムアウトを管理するための基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelManagerBase.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultReceiveTimeout">
      <summary>派生クラスでオーバーライドされると、チャネルがメッセージの受信を完了する必要がある既定の時間を取得します。</summary>
      <returns>receive メソッドが呼び出された後、チャネルがメッセージの受信を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultSendTimeout">
      <summary>派生クラスでオーバーライドされると、チャネルがメッセージの送信を完了する必要がある既定の時間を取得します。</summary>
      <returns>send メソッドが呼び出された後、チャネルがメッセージの受信を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>通信オブジェクトによって呼び出された close メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>close メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>通信オブジェクトによって呼び出された open メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>open メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>通信オブジェクトによって呼び出された receive メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>receive メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>通信オブジェクトによって呼び出された send メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>send メソッドがタイムアウトするまで待機する期間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelParameterCollection">
      <summary>チャネル パラメーターのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor(System.ServiceModel.Channels.IChannel)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channel">このコレクションにパラメーターを格納するチャネル。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelParameterCollection.Channel">
      <summary>このコレクションにパラメーターを格納するチャネルを取得します。</summary>
      <returns>このコレクションにパラメーターが格納される <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.ClearItems">
      <summary>パラメーターのコレクションをクリアします。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>コレクション内の指定したインデックス位置に、指定した項目を挿入します。</summary>
      <param name="index">コレクション内の項目のインデックス。</param>
      <param name="item">コレクションに追加する項目。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.PropagateChannelParameters(System.ServiceModel.Channels.IChannel)">
      <summary>現在のコレクションのパラメーターを、指定したチャネルの <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> に追加します。</summary>
      <param name="innerChannel">現在のコレクションのパラメーターを受け取るチャネル。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.RemoveItem(System.Int32)">
      <summary>コレクションからパラメーターを削除します。</summary>
      <param name="index">削除するパラメーターのインデックス。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>コレクションの指定したインデックス位置にある項目を置換します。</summary>
      <param name="index">置換する項目のインデックス。</param>
      <param name="item">置換項目の値。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CommunicationObject">
      <summary>チャネル、リスナー、チャネルとリスナーのファクトリなど、システム内のすべての通信指向オブジェクトに共通する基本ステート マシンの基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor(System.Object)">
      <summary>状態遷移を保護するための相互排他的ロックを指定して、<see cref="T:System.ServiceModel.Channels.CommunicationObject" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mutex">状態遷移中にクラス インスタンスを保護する相互排他的なロック。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Abort">
      <summary>通信オブジェクトを、直ちに現在の状態から Closing 状態に遷移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期のクローズ操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>タイムアウトを指定して、通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">クローズ操作がタイムアウトになるまでの時間を表す <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期のクローズ操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期のオープン操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のオープン操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内で通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期のオープン操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のオープン操作に関連付けられている状態情報を保持する、アプリケーションで指定されたオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close">
      <summary>通信オブジェクトを、現在の状態から Closed 状態に遷移させます。</summary>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)">
      <summary>指定した時間内で、通信オブジェクトを現在の状態から Closed 状態に遷移させます。</summary>
      <param name="timeout">クローズ操作がタイムアウトになるまでの時間を表す <see cref="T:System.Timespan" />。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closed">
      <summary>通信オブジェクトが Closed 状態に遷移すると発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closing">
      <summary>通信オブジェクトが Closing 状態に遷移すると発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
      <summary>派生クラスでオーバーライドされると、クローズ操作の完了に対して指定されている既定の時間を取得します。</summary>
      <returns>クローズ操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
      <summary>派生クラスでオーバーライドされると、オープン操作の完了に対して指定されている既定の時間を取得します。</summary>
      <returns>オープン操作を完了する必要がある制限時間を指定する既定の <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)">
      <summary>通信オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>通信オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Fault">
      <summary>通信オブジェクトを、現在の状態から Faulted 状態に遷移させます。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Faulted">
      <summary>通信オブジェクトが Faulted 状態に遷移すると発生します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType">
      <summary>通信オブジェクトの型を取得します。</summary>
      <returns>通信オブジェクトの型。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed">
      <summary>通信オブジェクトが破棄されたかどうかを示す値を取得します。</summary>
      <returns>通信オブジェクトが Closed 状態の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
      <summary>同期中止操作の呼び出しにより通信オブジェクトが終了状態に遷移した後で、通信オブジェクトに処理を挿入します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>非同期クローズ操作の呼び出しにより通信オブジェクトが Closing 状態に遷移した後で、処理を挿入します。</summary>
      <returns>非同期のクローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">クローズ操作を完了する必要がある制限時間を指定する <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</param>
      <param name="callback">非同期のクローズ操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のクローズ操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>非同期オープン操作の呼び出しにより通信オブジェクトが Opening 状態に遷移した後で、通信オブジェクトに処理を挿入します。</summary>
      <returns>非同期のオープン操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">オープン操作を完了する必要がある制限時間を指定する <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</param>
      <param name="callback">非同期のオープン操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期のオープン操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
      <summary>同期クローズ操作の呼び出しにより通信オブジェクトが Closing 状態に遷移した後で、通信オブジェクトに処理を挿入します。</summary>
      <param name="timeout">クローズ操作を完了する必要がある制限時間を指定する <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> が、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
      <exception cref="T:System.ServiceModel.CommunicationException">オブジェクトを閉じている途中で通信エラーが発生しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
      <summary>通信オブジェクトが Closing 状態に遷移しているときに呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
      <summary>通信オブジェクトが Closing 状態に遷移しているときに呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
      <summary>通信オブジェクトがクローズしたら非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
      <summary>通信オブジェクトがオープンしたら、非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted">
      <summary>同期フォールト操作の呼び出しにより通信オブジェクトが Faulted 状態に遷移した後で、通信オブジェクトに処理を挿入します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
      <summary>指定した時間内に完了する必要がある開始状態に通信オブジェクトが遷移した後で、通信オブジェクトに処理を挿入します。</summary>
      <param name="timeout">オープン操作を完了する必要がある制限時間を指定する <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトします。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
      <summary>通信オブジェクトが Opened 状態に遷移しているときに呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
      <summary>通信オブジェクトが Opening 状態に遷移しているときに呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open">
      <summary>通信オブジェクトを、Created 状態から Opened 状態に遷移させます。</summary>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)">
      <summary>指定した時間内で、通信オブジェクトを Created 状態から Opened 状態に遷移させます。</summary>
      <param name="timeout">オープン操作がタイムアウトになるまでの時間を表す <see cref="T:System.Timespan" />。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられている既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opened">
      <summary>通信オブジェクトが Opened 状態に遷移すると発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opening">
      <summary>通信オブジェクトが Opening 状態に遷移すると発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.State">
      <summary>通信オブジェクトの現在の状態を示す値を取得します。</summary>
      <returns>オブジェクトの現在の状態を示す <see cref="T:System.ServiceModel.CommunicationState" /> 列挙体の値。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.ThisLock">
      <summary>状態遷移中にクラス インスタンスを保護する相互排他的なロックを取得します。</summary>
      <returns>状態遷移中にクラス インスタンスを保護する相互排他的なロック。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.CompressionFormat">
      <summary>チャネルの圧縮形式を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.CompressionFormat.Deflate">
      <summary>Deflate 圧縮形式。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.CompressionFormat.GZip">
      <summary>GZip 圧縮形式。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.CompressionFormat.None">
      <summary>None 圧縮形式。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.CustomBinding">
      <summary>バインド要素の一覧からバインドを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>完全なチャネル スタックのバインド要素を使用して、<see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">トップダウンの順序でチャネル スタックのバインド要素を格納する <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>指定したバインドの値を使用して、<see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">カスタム バインドを初期化するために使用する <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>バインド要素の配列を使用して <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">カスタム バインドを初期化するために使用する <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String,System.String,System.ServiceModel.Channels.BindingElement[])">
      <summary>指定した名前と名前空間を使用して、バインド要素の配列から <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">バインドの名前。</param>
      <param name="ns">バインドの名前空間。</param>
      <param name="bindingElementsInTopDownChannelStackOrder">カスタム バインドを初期化するために使用する <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.CreateBindingElements">
      <summary>カスタム バインドのバインド要素のジェネリック コレクションを返します。</summary>
      <returns>カスタム バインドのバインド要素を含む <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Elements">
      <summary>カスタム バインドからバインド要素を取得します。</summary>
      <returns>カスタム バインドのバインド要素を格納する <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Scheme">
      <summary>カスタム バインドが使用するトランスポートの URI スキームを取得します。</summary>
      <returns>カスタム バインドで使用するトランスポートの URI スキーム。または、トランスポートがない場合 (<see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> が null である場合) は、空の文字列。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.FaultConverter">
      <summary>チャネルがスローした例外を、チャネルのプロトコルに準拠する SOAP エラー メッセージに変換します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.FaultConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.GetDefaultFaultConverter(System.ServiceModel.Channels.MessageVersion)">
      <summary>既定のエラー コンバーターを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.FaultConverter" /> のインスタンス。</returns>
      <param name="version">メッセージのバージョン。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>例外の作成を試みます。</summary>
      <returns>エラーが正常に変換された場合は true。それ以外の場合は false。既定値は、false です。</returns>
      <param name="message">エラー メッセージ。</param>
      <param name="fault">エラー。</param>
      <param name="exception">変換が成功した場合に out パラメーターとして返された SOAP 例外。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)">
      <summary>エラーが SOAP 例外に変換されたら、エラー メッセージの作成を試みます。</summary>
      <returns>エラー メッセージが正常に作成された場合は true。それ以外の場合は false。既定値は、false です。</returns>
      <param name="exception">SOAP 例外。</param>
      <param name="message">out パラメーターとして返されたエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.TryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>エラー チェックで <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> をラップします。</summary>
      <returns>エラーが正常に変換された場合は true。それ以外の場合は false。既定値は、false です。</returns>
      <param name="message">エラー メッセージ。</param>
      <param name="fault">エラー。</param>
      <param name="exception">変換が成功した場合に out パラメーターとして返された SOAP 例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> または <paramref name="fault" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> は true を返しましたが、<paramref name="exception" /> は null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> は false を返しましたが、<paramref name="exception" /> は null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannel">
      <summary>すべてのチャネル オブジェクトが実装する必要がある基本インターフェイスを定義します。すべての通信オブジェクトが共有するステート マシン インターフェイスを実装し、チャネル スタックからオブジェクトを取得するためのメソッドを実装する必要があります。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory">
      <summary>チャネル ファクトリがチャネルを作成するために実装する必要があるインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求される型指定されたオブジェクト <paramref name="T" /> がある場合は、そのオブジェクト。ない場合は null。</returns>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory`1">
      <summary>種類に固有のチャネルを作成するためにチャネル ファクトリが実装する必要があるインターフェイスを定義します。</summary>
      <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>指定したエンドポイント アドレスへの指定した種類のチャネルを作成します。</summary>
      <returns>指定したエンドポイント アドレスへの <paramref name="TChannel" /> 型のチャネル。</returns>
      <param name="to">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>チャネルの種類と、メッセージの送信先のエンドポイント アドレスとトランスポート アドレスを指定して、チャネルを作成します。</summary>
      <returns>指定したエンドポイント アドレスとトランスポート アドレスへの <paramref name="TChannel" /> 型のチャネル。</returns>
      <param name="to">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">メッセージの送信先のトランスポート アドレスを格納している <see cref="T:System.Uri" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexChannel">
      <summary>チャネルがメッセージを送信および受信するために実装する必要があるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSession">
      <summary>メッセージング エンドポイント間の双方向通信の両側に実装されるセッションのインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.AsyncCallback,System.Object)">
      <summary>送信セッションを終了する非同期操作を開始します。</summary>
      <returns>非同期送信セッションの終了を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">この要求の状態情報を格納する object。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>操作がその時間内に完了する必要があるタイムアウトを指定して、送信セッションを終了する非同期操作を開始します。</summary>
      <returns>非同期送信セッションの終了を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">操作完了の制限時間を指定する <see cref="T:System.TimeSpan" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">この要求の状態情報を格納する object。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession">
      <summary>セッションに関連付けられたチャネルのエンドポイントから、これ以上メッセージが送信されないことを示している送信セッションを終了します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession(System.TimeSpan)">
      <summary>指定した時間内に、セッションに関連付けられたチャネルのエンドポイントから、これ以上メッセージが送信されないことを示している送信セッションを終了します。</summary>
      <param name="timeout">操作完了の制限時間を指定する <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.EndCloseOutputSession(System.IAsyncResult)">
      <summary>セッションに関連付けられたチャネルのエンドポイントから、これ以上メッセージが送信されないことを示している送信セッションに対して、セッションを終了する非同期操作を完了します。</summary>
      <param name="result">いずれかの <see cref="Overload:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSessionChannel">
      <summary>双方向チャネルとセッションを関連付けるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputChannel">
      <summary>チャネルがメッセージを受信するために実装する必要があるインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>状態オブジェクトが関連付けられているメッセージを受信するための非同期操作を開始します。</summary>
      <returns>非同期メッセージ受信を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>タイムアウトが指定され、状態オブジェクトが関連付けられているメッセージを受信するための、非同期操作を開始します。</summary>
      <returns>非同期受信の操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">メッセージが利用可能になるまでの待機時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したタイムアウトの値が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>タイムアウトが指定され、状態オブジェクトが関連付けられているメッセージを受信するための、非同期操作を開始します。</summary>
      <returns>非同期受信の操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">メッセージが利用可能になるまでの待機時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したタイムアウトの値が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>タイムアウトが指定され、状態オブジェクトが関連付けられている、非同期メッセージ受信待機操作を開始します。</summary>
      <returns>メッセージが到着するのを待機するための非同期操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">メッセージが利用可能になるまでの待機時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したタイムアウトの値が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
      <summary>メッセージを受信するための非同期操作を完了します。</summary>
      <returns>受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">いずれかの <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
      <summary>メッセージを受信するための指定した非同期操作を完了します。</summary>
      <returns>指定した期間が経過する前にメッセージを受信する場合は true、それ以外の場合は false。</returns>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
      <summary>指定した非同期のメッセージ待機操作を完了します。</summary>
      <returns>
        <paramref name="timeout" /> が経過する前にメッセージが到着した場合は true、それ以外の場合は false。</returns>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> 操作が完了したことを識別し、最終結果を提供する <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
      <summary>入力チャネルがメッセージを受信するアドレスを取得します。</summary>
      <returns>入力チャネルがメッセージを受信する <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive">
      <summary>利用できるメッセージがある場合、受信したメッセージを返します。メッセージが利用できない場合は、既定の時間が経過するまでブロックします。</summary>
      <returns>受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
      <summary>利用できるメッセージがある場合、受信したメッセージを返します。メッセージが利用できない場合は、指定した時間が経過するまでブロックします。</summary>
      <returns>受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="timeout">受信操作を完了する必要がある制限時間を指定する <see cref="T:System.Timespan" />。この時間を経過すると、タイムアウトして <see cref="T:System.TimeoutException" /> がスローされます。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したタイムアウトの値が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
      <summary>指定された時間内にメッセージの受信を試みます。</summary>
      <returns>
        <paramref name="timeout" /> が経過する前にメッセージを受信した場合は true、それ以外の場合は false。</returns>
      <param name="timeout">いずれかの <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したタイムアウトの値が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
      <summary>指定した時間内にメッセージが到着したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="timeout" /> が経過する前にメッセージが到着した場合は true、それ以外の場合は false。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" /> は、メッセージ到着の待機がタイムアウトするまでの最大時間を指定します。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したタイムアウトの値が 0 未満です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSession">
      <summary>メッセージング エンドポイント間の一方向通信の受信側に実装されるセッションのインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSessionChannel">
      <summary>入力チャネルとセッションを関連付けるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IMessageProperty">
      <summary>メッセージに対するプロパティのセットを記述するために実装できるインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IMessageProperty.CreateCopy">
      <summary>現在のインスタンスのコピーを作成します。</summary>
      <returns>現在のインスタンスのコピーである <see cref="T:System.ServiceModel.Channels.IMessageProperty" /> オブジェクト。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputChannel">
      <summary>チャネルがメッセージを送信するために実装する必要があるインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>出力チャネルの送信先に対してメッセージを送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ転送を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネルで送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内での出力チャネルの送信先に対するメッセージ送信の非同期操作を開始します。</summary>
      <returns>非同期の送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネルで送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作送信の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
      <summary>出力チャネルの送信先に対してメッセージを送信する非同期操作を完了します。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
      <summary>出力チャネルで送信されるメッセージの送信先となるサービスの送信先を取得します。</summary>
      <returns>出力チャネルでのメッセージの送信先となるサービスの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
      <summary>出力チャネルの送信先にメッセージを送信します。</summary>
      <param name="message">出力チャネルで送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定した時間内に現在の出力チャネルでメッセージを送信します。</summary>
      <param name="message">出力チャネルで送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">送信操作を完了する必要がある、タイムアウトまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.Via">
      <summary>出力チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する URI を取得します。</summary>
      <returns>出力チャネルで送信されるメッセージの送信先となるトランスポート アドレスを格納する <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSession">
      <summary>メッセージング エンドポイント間の一方向通信の送信側に実装されるセッションのインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSessionChannel">
      <summary>出力チャネルとセッションを関連付けるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestChannel">
      <summary>チャネルがメッセージング エンドポイント間の要求/応答通信の要求側になるために実装する必要があるコントラクトを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>要求/応答メッセージ交換の応答側に要求メッセージを送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ転送を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">転送される要求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">要求メッセージを転送する非同期操作の完了の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを転送する非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定した時間内で要求/応答メッセージ交換の応答側に要求メッセージを送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ転送を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">転送される要求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">応答受信の制限時間を指定する <see cref="T:System.TimeSpan" />。既定値については、「解説」を参照してください。</param>
      <param name="callback">要求メッセージを転送する非同期操作の完了の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを転送する非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
      <summary>送信された要求に対してメッセージ ベースの応答を返す非同期操作を完了します。</summary>
      <returns>要求に対する応答として受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
      <summary>要求チャネルがメッセージを送信する先のリモート アドレスを取得します。</summary>
      <returns>要求チャネルがメッセージを送信する先の <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
      <summary>メッセージ ベースの要求を送信し、対応するメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答として受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">転送される要求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定した時間内に、メッセージ ベースの要求を送信し、対応するメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答として受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">転送される要求 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">応答受信の制限時間を指定する <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.Via">
      <summary>要求の送信先のトランスポート アドレスを取得します。</summary>
      <returns>メッセージの送信先のトランスポート アドレスを格納している <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestSessionChannel">
      <summary>要求チャネルとセッションを関連付けるためのインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ISession">
      <summary>通信セッションの ID を提供して、メッセージを交換するパーティ間の共有コンテキストを確立するためのインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISession.Id">
      <summary>セッションを一意に識別する ID を取得します。</summary>
      <returns>セッションを一意に識別する ID。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISessionChannel`1">
      <summary>チャネルと特定の型のセッションを関連付けるインターフェイスを定義します。</summary>
      <typeparam name="TSession">チャネルと関連付ける <see cref="T:System.ServiceModel.Channels.ISession" /> の型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ISessionChannel`1.Session">
      <summary>このチャネルに関連付けられているセッションの型を取得します。</summary>
      <returns>このチャネルに関連付けられている <see cref="T:System.ServiceModel.Channels.ISession" /> の型。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.Message">
      <summary>分散環境でのエンドポイント間の通信の単位を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.Close">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> を閉じて、すべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)">
      <summary>今後アクセスできるように、<see cref="T:System.ServiceModel.Channels.Message" /> 全体をメモリ バッファーに格納します。</summary>
      <returns>新しく作成された <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> オブジェクト。</returns>
      <param name="maxBufferSize">作成するバッファーの最大サイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferSize " /> が 0 未満です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージが閉じられています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String)">
      <summary>バージョンとアクションを含むメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージで使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の説明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> または <paramref name="action" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object)">
      <summary>指定したバージョン、アクション、および本文を使用して、メッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージで使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の説明。</param>
      <param name="body">メッセージの本文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定したバージョン、アクション、メッセージ本文、およびシリアライザーを使用して、メッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージで使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の説明。</param>
      <param name="body">メッセージの本文。</param>
      <param name="serializer">メッセージをシリアル化するために使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="fault" />、または <paramref name="action" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.ServiceModel.Channels.BodyWriter)">
      <summary>本文がバイト配列で構成されるメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージで使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の説明。</param>
      <param name="body">byte 型の <see cref="T:System.ServiceModel.Channels.BodyWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlDictionaryReader)">
      <summary>指定したバージョン、アクション、および本文を使用して、メッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージで使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の説明。</param>
      <param name="body">メッセージの本文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlReader)">
      <summary>指定したリーダー、アクション、およびバージョンを使用して、メッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージで使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の説明。</param>
      <param name="body">SOAP メッセージを読み取るために使用する <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlDictionaryReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定したリーダー、アクション、およびバージョンを使用して、メッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="envelopeReader">SOAP メッセージを読み取るために使用する <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</param>
      <param name="maxSizeOfHeaders">ヘッダーの最大サイズ (バイト単位)。</param>
      <param name="version">メッセージで使用する SOAP バージョンを指定する有効な <see cref="T:System.ServiceModel.Channels.MessageVersion" /> 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> または <paramref name="version" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定したリーダー、アクション、およびバージョンを使用して、メッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="envelopeReader">SOAP メッセージを読み取るために使用する <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <param name="maxSizeOfHeaders">ヘッダーの最大サイズ (バイト単位)。</param>
      <param name="version">メッセージで使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> または <paramref name="version" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1">
      <summary>この <see cref="T:System.ServiceModel.Channels.Message" /> インスタンスの本文を取得します。</summary>
      <returns>このメッセージの本文を格納している <paramref name="T" /> 型のオブジェクト。</returns>
      <typeparam name="T">メッセージの本文。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定したシリアライザーを使用して、この <see cref="T:System.ServiceModel.Channels.Message" /> の本文を取得します。</summary>
      <returns>このメッセージの本文を格納している <paramref name="T" /> 型のオブジェクト。</returns>
      <param name="serializer">メッセージの本文を読み取るために使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> オブジェクト。</param>
      <typeparam name="T">メッセージの本文。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBodyAttribute(System.String,System.String)">
      <summary>メッセージ本文の属性を取得します。</summary>
      <returns>メッセージ本文の属性。</returns>
      <param name="localName">XML ノードのローカル名。このメンバーに対応する要素の名前。この文字列は、有効な XML 要素名であることが必要です。</param>
      <param name="ns">この XML 要素が属する名前空間。このメンバーに対応する要素の名前空間 URI。システムでは、トランスポート アドレス以外の URI は検証されません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージが閉じられています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetReaderAtBodyContents">
      <summary>このメッセージの本文の内容にアクセスする XML ディクショナリ リーダーを取得します。</summary>
      <returns>このメッセージの本文にアクセスする <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが閉じられています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージが空であるか、メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Headers">
      <summary>派生クラスでオーバーライドされた場合、メッセージのヘッダーを取得します。</summary>
      <returns>メッセージのヘッダーを表す <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> オブジェクト。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsDisposed">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> が破棄されたかどうかを示す値を返します。</summary>
      <returns>メッセージが破棄されている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsEmpty">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> が空かどうかを示す値を返します。</summary>
      <returns>メッセージが空の場合は true。それ以外の場合は false。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsFault">
      <summary>このメッセージが何らかの SOAP エラーを生成するかどうか示す値を取得します。</summary>
      <returns>このメッセージが SOAP エラーを生成する場合は true。それ以外の場合は false。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBodyToString(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ本文が文字列に変換されるときに呼び出されます。</summary>
      <param name="writer">メッセージ本文を文字列に変換するために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnClose">
      <summary>メッセージが閉じるときに呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnCreateBufferedCopy(System.Int32)">
      <summary>このメッセージを格納するためにメッセージ バッファーが作成されるときに呼び出されます。</summary>
      <returns>新しく作成されたメッセージ コピーの <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> オブジェクト。</returns>
      <param name="maxBufferSize">作成するバッファーの最大サイズ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBody``1(System.Xml.XmlDictionaryReader)">
      <summary>メッセージの本文が取得されるときに呼び出されます。</summary>
      <returns>メッセージの本文を表す <see cref="T:System.ServiceModel.Channels.MessageBuffer" />。</returns>
      <param name="reader">メッセージの本文を読み取るために使用される <see cref="T:System.Xml.XmlDictionaryReader)" /> オブジェクト。</param>
      <typeparam name="T">メッセージ本文の型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBodyAttribute(System.String,System.String)">
      <summary>メッセージ本文の属性が取得されるときに呼び出されます。</summary>
      <returns>メッセージ本文の属性。</returns>
      <param name="localName">XML ノードのローカル名。このメンバーに対応する要素の名前。この文字列は、有効な XML 要素名であることが必要です。</param>
      <param name="ns">この XML 要素が属する名前空間。このメンバーに対応する要素の名前空間 URI。システムでは、トランスポート アドレス以外の URI は検証されません。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents">
      <summary>このメッセージの本文の内容にアクセスする XML ディクショナリ リーダーが取得されるときに呼び出されます。</summary>
      <returns>このメッセージの本文にアクセスする <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ本文が XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">このメッセージ本文を XML ファイルに書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ全体が XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">このメッセージを XML ファイルに書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>開始本文が XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">開始本文を XML ファイルに書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>開始エンベロープが XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">開始エンベロープを XML ファイルに書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartHeaders(System.Xml.XmlDictionaryWriter)">
      <summary>開始ヘッダーが XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">開始ヘッダーを XML ファイルに書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Properties">
      <summary>派生クラスでオーバーライドされた場合、メッセージに対する処理レベルの注釈セットを取得します。</summary>
      <returns>メッセージに対する処理レベルの注釈セットが格納されている <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.State">
      <summary>この <see cref="T:System.ServiceModel.Channels.Message" /> の現在の状態を取得します。</summary>
      <returns>この <see cref="T:System.ServiceModel.Channels.Message" /> の現在の状態を格納する <see cref="T:System.ServiceModel.Channels.MessageState" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.System#IDisposable#Dispose">
      <summary>このメッセージが使用したすべてのリソースを閉じます。このメソッドは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.ToString">
      <summary>現在の <see cref="T:System.ServiceModel.Channels.Message" /> インスタンスを表す文字列を返します。</summary>
      <returns>現在の <see cref="T:System.ServiceModel.Channels.Message" /> インスタンスの文字列形式。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Version">
      <summary>派生クラスでオーバーライドされた場合は、メッセージの SOAP バージョンを取得します。</summary>
      <returns>SOAP バージョンを表す <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlDictionaryWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して、本文要素を書き込みます。</summary>
      <param name="writer">本文要素を書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> を使用して、メッセージ本文をシリアル化します。</summary>
      <param name="writer">メッセージの本文の書き込みで使用される <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null なので、</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージは破棄されています。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して、本文の内容をシリアル化します。</summary>
      <param name="writer">本文要素を書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />が null です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージが閉じられています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して、メッセージ全体をシリアル化します。</summary>
      <param name="writer">メッセージを書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null なので、</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージが閉じられています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> を使用して、メッセージ全体をシリアル化します。</summary>
      <param name="writer">メッセージ全体を書き込むために使用される <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null なので、</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージが閉じられています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して、メッセージの開始本文をシリアル化します。</summary>
      <param name="writer">開始本文を書き込むために使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して、メッセージの開始本文をシリアル化します。</summary>
      <param name="writer">メッセージの開始本文の書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して、開始エンベロープをシリアル化します。</summary>
      <param name="writer">開始エンベロープの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageBuffer">
      <summary>後で使用するためにメッセージ全体を格納しているメモリ バッファーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.BufferSize">
      <summary>この <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> が使用する概算のバイト数を取得します。</summary>
      <returns>この <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> が使用する概算のバイト数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.Close">
      <summary>バッファーの使用を終了します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage">
      <summary>元のメッセージのコピーを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.Message" /> インスタンスの <see cref="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)" /> メソッドに以前に渡した元の <see cref="T:System.ServiceModel.Channels.Message" /> インスタンスの完全なコピー。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType">
      <summary>このバッファーに保存されたメッセージの内容の種類を取得します。</summary>
      <returns>このバッファーに保存されたメッセージの内容の種類。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。このメソッドは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)">
      <summary>このバッファーの内容全体を指定した IO ストリームに書き込みます。</summary>
      <param name="stream">このバッファーの内容全体を書き込む IO ストリーム。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoder">
      <summary>エンコーダーは、ストリームへのメッセージの書き込みおよびストリームからのメッセージの読み取りに使用されるコンポーネントです。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
      <summary>派生クラスでオーバーライドされた場合、エンコーダーで使用される MIME コンテンツ タイプを取得します。</summary>
      <returns>メッセージ エンコーダーがサポートするコンテンツ タイプ。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T " />が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
      <summary>指定したメッセージ レベルのコンテンツ タイプ値をメッセージ エンコーダーがサポートするかどうかを示す値を返します。</summary>
      <returns>指定したメッセージ レベルのコンテンツ タイプがサポートされる場合は true、それ以外の場合は false。</returns>
      <param name="contentType">検査するメッセージ レベルのコンテンツ タイプ。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
      <summary>派生クラスでオーバーライドされた場合、エンコーダーが使用するメディア タイプの値を取得します。</summary>
      <returns>メッセージ エンコーダーがサポートするメディア タイプ。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
      <summary>派生クラスでオーバーライドされた場合、エンコーダーが使用するメッセージ バージョンの値を取得します。</summary>
      <returns>エンコーダーが使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
      <summary>派生クラスでオーバーライドされた場合、指定したバッファーからメッセージを読み取ります。</summary>
      <returns>指定したバッファーから読み取る <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">メッセージの逆シリアル化元であるバッファーを提供する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" />。</param>
      <param name="bufferManager">メッセージの逆シリアル化元であるバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
      <summary>派生クラスでオーバーライドされた場合、指定したストリームからメッセージを読み取ります。</summary>
      <returns>指定されたストリームから読み取る <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">メッセージの逆シリアル化元であるバッファーを提供する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" />。</param>
      <param name="bufferManager">メッセージの逆シリアル化元であるバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
      <param name="contentType">Multipurpose Internet Mail Extensions (MIME) メッセージ レベルのコンテンツ タイプ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定したストリームからメッセージを読み取ります。</summary>
      <returns>指定されたストリームから読み取る <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">メッセージの読み取り元である <see cref="T:System.IO.Stream" /> オブジェクト。</param>
      <param name="maxSizeOfHeaders">メッセージから読み取り可能なヘッダーの最大サイズ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
      <summary>派生クラスでオーバーライドされた場合、指定したストリームからメッセージを読み取ります。</summary>
      <returns>指定されたストリームから読み取る <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">メッセージの読み取り元である <see cref="T:System.IO.Stream" /> オブジェクト。</param>
      <param name="maxSizeOfHeaders">メッセージから読み取り可能なヘッダーの最大サイズ。</param>
      <param name="contentType">Multipurpose Internet Mail Extensions (MIME) メッセージ レベルのコンテンツ タイプ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ToString">
      <summary>メッセージ エンコーダーが使用するコンテンツ タイプを返します。</summary>
      <returns>メッセージ エンコーダーが使用するコンテンツ タイプ。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
      <summary>指定したサイズより小さいメッセージを、バイト配列バッファーに書き込みます。</summary>
      <returns>メッセージのシリアル化先であるバッファーを提供する byte 型の <see cref="T:System.ArraySegment`1" />。</returns>
      <param name="message">メッセージ バッファーに書き込む <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">書き込み可能な最大メッセージ サイズ。</param>
      <param name="bufferManager">メッセージの書き込み先であるバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、指定したサイズより小さいメッセージを、指定したオフセットのバイト配列バッファーに書き込みます。</summary>
      <returns>メッセージのシリアル化先であるバッファーを提供する byte 型の <see cref="T:System.ArraySegment`1" />。</returns>
      <param name="message">メッセージ バッファーに書き込む <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">書き込み可能な最大メッセージ サイズ。</param>
      <param name="bufferManager">メッセージの書き込み先であるバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
      <param name="messageOffset">バッファーを提供するバイト配列の先頭から開始するセグメントのオフセット。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
      <summary>派生クラスでオーバーライドされた場合、指定したストリームにメッセージを書き込みます。</summary>
      <param name="message">
        <paramref name="stream" /> に書き込む <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="stream">
        <paramref name="message" /> を書き込む <see cref="T:System.IO.Stream" /> オブジェクト。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoderFactory">
      <summary>メッセージ エンコーダーを生成するためのファクトリを表す抽象基本クラス。このメッセージ エンコーダーは、ストリームからメッセージを読み取り、それをさまざまなメッセージ エンコーディング形式のストリームに書き込むことができます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.CreateSessionEncoder">
      <summary>セッション ベースの交換でメッセージを関連付けるために使用できるメッセージ エンコーダーを返します。</summary>
      <returns>セッション ベースのメッセージ交換で使用する <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.Encoder">
      <summary>派生クラスでオーバーライドされた場合、ファクトリによって生成されるメッセージ エンコーダーを取得します。</summary>
      <returns>ファクトリが使用する <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.MessageVersion">
      <summary>派生クラスでオーバーライドされた場合、メッセージをエンコードするためにファクトリによって生成されるメッセージ エンコーダーが使用するメッセージ バージョンを取得します。</summary>
      <returns>ファクトリが使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElement">
      <summary>メッセージをエンコードするために使用するメッセージ バージョンを指定するバインド要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
      <summary>既存の要素から初期化された <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elementToBeCloned">複製する <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>派生クラスでオーバーライドされた場合、メッセージ エンコーダーを生成するためのファクトリを作成します。</summary>
      <returns>メッセージ エンコーダーを生成するために使用する <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>チャネル スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <param name="context">現在のバインディング要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> は null なので、</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncodingBindingElement.MessageVersion">
      <summary>派生クラスでオーバーライドされた場合、メッセージ エンコーダー ファクトリによって生成されるメッセージ エンコーダーが処理できるメッセージ バージョンを取得または設定します。</summary>
      <returns>メッセージ エンコーダー ファクトリによって生成されるエンコーダーが使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageFault">
      <summary>
        <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> に渡してエラー情報を含むメッセージを作成することのできる SOAP エラーのメモリ内表現を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.#ctor">
      <summary>派生クラスで呼び出されると、<see cref="T:System.ServiceModel.Channels.MessageFault" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Actor">
      <summary>アクターの値を取得または設定します。</summary>
      <returns>アクターの値。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Code">
      <summary>SOAP エラー コードを取得します。</summary>
      <returns>SOAP エラー コードを格納する <see cref="T:System.ServiceModel.FaultCode" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>指定した <see cref="T:System.ServiceModel.Channels.Message" /> およびメッセージ バッファーに対する指定した最大バッファー サイズを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトを返します。</summary>
      <returns>パラメーターで渡された値からの初期値を持つ <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクト。</returns>
      <param name="message">
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトを作成するために使用する <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxBufferSize">メッセージ バッファーの最大バッファサイズ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1">
      <summary>メッセージ エラーの詳細オブジェクトを返します。</summary>
      <returns>メッセージ エラーの詳細オブジェクト。</returns>
      <typeparam name="T">詳細オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定した <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> を使用する詳細オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> に格納された詳細オブジェクト。</returns>
      <param name="serializer">詳細オブジェクトを逆シリアル化するときに使用する <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">詳細オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetReaderAtDetailContents">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクト上に配置された <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクトに配置された <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.HasDetail">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> に詳細オブジェクトがあるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> に詳細オブジェクトがある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Node">
      <summary>エラーの原因となったメッセージ パス上の SOAP ノードに関する情報を格納する SOAP ノードを取得します。</summary>
      <returns>エラーの原因となったメッセージ パス上の SOAP ノードに関する情報を格納する SOAP ノード。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnGetReaderAtDetailContents">
      <summary>派生クラスで呼び出されると、<see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクトに配置された <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクトに配置された <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>詳細内容を書き込む前に呼び出されます。</summary>
      <param name="writer">詳細要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">書き込む SOAP エンベロープのバージョン。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetailContents(System.Xml.XmlDictionaryWriter)">
      <summary>非抽象派生クラスでオーバーライドされると、詳細要素の内容を書き込みます。</summary>
      <param name="writer">詳細要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteStartDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> および SOAP エンベロープのバージョンを使用して、開始要素を書き込みます。</summary>
      <param name="writer">詳細要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">書き込む SOAP エンベロープのバージョン。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Reason">
      <summary>SOAP エラーの説明文を取得します。</summary>
      <returns>SOAP エラーの説明文を格納する <see cref="T:System.ServiceModel.FaultReason" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeader">
      <summary>SOAP ヘッダーの内容を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Actor">
      <summary>メッセージ ヘッダーの対象受信先を取得または設定します。</summary>
      <returns>メッセージ ヘッダーで対象とされている受信先。既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object)">
      <summary>指定したデータを使用して、新しいメッセージ ヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean)">
      <summary>指定したデータを使用して、新しいメッセージ ヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="mustUnderstand">ヘッダーの認識が必要かどうかを指定する値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String)">
      <summary>指定したデータを使用して、新しいメッセージ ヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="mustUnderstand">ヘッダーの認識が必要かどうかを指定する値。</param>
      <param name="actor">メッセージ ヘッダーで対象とされている受信先。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String,System.Boolean)">
      <summary>指定したデータを使用して、新しいメッセージ ヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="mustUnderstand">ヘッダーの認識が必要かどうかを指定する値。</param>
      <param name="actor">メッセージ ヘッダーで対象とされている受信先。</param>
      <param name="relay">ヘッダーの転送が必要かどうかを指定する値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>XmlFormatter を使用してシリアル化するオブジェクトからヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">ヘッダーのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean)">
      <summary>指定したデータを使用して、新しいメッセージ ヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">ヘッダーのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <param name="mustUnderstand">ヘッダーの認識が必要かどうかを指定する値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String)">
      <summary>指定したデータを使用して、新しいメッセージ ヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">ヘッダーのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <param name="mustUnderstand">ヘッダーの認識が必要かどうかを指定する値。</param>
      <param name="actor">メッセージ ヘッダーで対象とされている受信先。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String,System.Boolean)">
      <summary>指定したデータを使用して、新しいメッセージ ヘッダーを作成します。</summary>
      <returns>指定したデータを使用する新しい <see cref="T:System.ServiceModel.Channels.MessageHeader" /> オブジェクト。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">ヘッダーのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <param name="mustUnderstand">ヘッダーの認識が必要かどうかを指定する値。</param>
      <param name="actor">メッセージ ヘッダーで対象とされている受信先。</param>
      <param name="relay">ヘッダーの転送が必要かどうかを指定する値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion)">
      <summary>指定したメッセージ バージョンがサポートされるかどうかを検証します。</summary>
      <returns>指定したメッセージ バージョンがサポートされている場合は true、それ以外の場合は false。</returns>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.IsReferenceParameter">
      <summary>メッセージ ヘッダーがエンドポイント参照の参照パラメーターを格納しているかどうかを指定する値を取得します。</summary>
      <returns>このメッセージ ヘッダーにエンドポイント参照の参照パラメーターが格納されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.MustUnderstand">
      <summary>SOAP 1.1/1.2 仕様に従って、ヘッダーを認識する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>ヘッダーを認識する必要がある場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定された XML ライターを使用してヘッダーの内容がシリアル化されるときに呼び出されます。</summary>
      <param name="writer">ヘッダーの内容をシリアル化するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>開始ヘッダーが、指定された XML ライターを使用してシリアル化されるときに呼び出されます。</summary>
      <param name="writer">開始ヘッダーをシリアル化するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Relay">
      <summary>ヘッダーの転送が必要かどうかを示す値を取得します。</summary>
      <returns>ヘッダーを転送する必要がある場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.ToString">
      <summary>このメッセージ ヘッダーの文字列形式を返します。</summary>
      <returns>このメッセージ ヘッダーの文字列形式。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定した XML ライターを使用して、ヘッダーをシリアル化します。</summary>
      <param name="writer">ヘッダーのシリアル化に使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定した XML ライターを使用して、ヘッダーをシリアル化します。</summary>
      <param name="writer">ヘッダーのシリアル化に使用される <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderAttributes(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定した XML ライターを使用して、ヘッダーの属性をシリアル化します。</summary>
      <param name="writer">ヘッダーの属性をシリアル化するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定した XML ライターを使用して、ヘッダーの内容をシリアル化します。</summary>
      <param name="writer">ヘッダーの内容をシリアル化するために使用される <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定した XML ライターを使用して、開始ヘッダーをシリアル化します。</summary>
      <param name="writer">開始ヘッダーをシリアル化するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報を格納するオブジェクト。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaderInfo">
      <summary>SOAP メッセージ ヘッダーに関するシステム情報を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaderInfo.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Actor">
      <summary>メッセージ ヘッダーの目的の受信先を取得または設定します。</summary>
      <returns>メッセージ ヘッダーの想定されている受信先を示す URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.IsReferenceParameter">
      <summary>メッセージ ヘッダーがエンドポイント参照の参照パラメーターを表しているかどうかを指定する値を取得します。</summary>
      <returns>メッセージ ヘッダーがエンドポイント参照の参照パラメーターを表している場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.MustUnderstand">
      <summary>メッセージ ヘッダーの処理が必須か、または省略可能かを示す値を取得または設定します。</summary>
      <returns>メッセージ ヘッダーの処理が必須である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Name">
      <summary>メッセージ ヘッダーの名前を取得します。</summary>
      <returns>メッセージ ヘッダーの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Namespace">
      <summary>メッセージ ヘッダーの名前空間を取得します。</summary>
      <returns>メッセージ ヘッダーの名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Relay">
      <summary>メッセージ ヘッダーを転送できるかどうかを示す値を取得または設定します。</summary>
      <returns>メッセージ ヘッダーを転送できる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaders">
      <summary>メッセージに対するメッセージ ヘッダーのコレクションを表します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageHeaders)">
      <summary>指定したメッセージ ヘッダーのコレクションを使用して、<see cref="T:System.ServiceModel.Channels.MessageHeaders" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">メッセージ ヘッダーのコレクション。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion)">
      <summary>指定したメッセージ バージョンを使用して、<see cref="T:System.ServiceModel.Channels.MessageHeaders" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">メッセージの SOAP バージョン。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion,System.Int32)">
      <summary>指定したメッセージ バージョンとサイズを使用して、<see cref="T:System.ServiceModel.Channels.MessageHeaders" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">メッセージの SOAP バージョン。</param>
      <param name="initialSize">ヘッダーのサイズ。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Action">
      <summary>メッセージの処理方法の説明を取得または設定します。</summary>
      <returns>メッセージの処理方法の説明。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Add(System.ServiceModel.Channels.MessageHeader)">
      <summary>指定したメッセージ ヘッダーをコレクションに追加します。</summary>
      <param name="header">コレクションに追加されるメッセージ ヘッダー。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Clear">
      <summary>コレクションからすべてのヘッダーを削除します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>指定したメッセージの指定したインデックスにあるヘッダーの内容を、このインスタンスにコピーします。</summary>
      <param name="message">ヘッダーのコピー元のメッセージ。</param>
      <param name="headerIndex">元のメッセージ ヘッダーの位置。ここから内容がコピーされます。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders,System.Int32)">
      <summary>指定したメッセージ ヘッダー コレクションの指定したインデックスにあるヘッダーの内容を、このインスタンスにコピーします。</summary>
      <param name="collection">
        <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> コレクション オブジェクト。</param>
      <param name="headerIndex">元のメッセージ ヘッダーの位置。ここから内容がコピーされます。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.Message)">
      <summary>指定したメッセージからこのインスタンスに、すべてのヘッダーの内容をコピーします。</summary>
      <param name="message">ヘッダーのコピー元のメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders)">
      <summary>指定したヘッダー コレクションからこのインスタンスに、内容をコピーします。</summary>
      <param name="collection">このインスタンスにヘッダーがコピーされるコピー元の <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> コレクション オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[],System.Int32)">
      <summary>このコレクションから配列にヘッダーをコピーします。コピーは配列内の特定のインデックスから開始されます。</summary>
      <param name="array">このインスタンスからメッセージ ヘッダー オブジェクトをコピーする先の 1 次元配列。配列では 0 から始まるインデックスを使用する必要があります。</param>
      <param name="index">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Count">
      <summary>このコレクションに含まれるメッセージ ヘッダーの数を取得します。</summary>
      <returns>このコレクションに含まれるメッセージ ヘッダーの数。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.FaultTo">
      <summary>エラーの送信先となるノードのアドレスを取得または設定します。</summary>
      <returns>エラーの送信先となるノードの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String)">
      <summary>ヘッダー要素の LocalName と名前空間 URI を指定して、このコレクション内のメッセージ ヘッダーを検索します。</summary>
      <returns>このコレクションでメッセージ ヘッダーが見つかった場合はそのインデックス。指定されたヘッダーが存在しない場合は -1。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <exception cref="T:System.ArgumentNullException">引数は null です。</exception>
      <exception cref="T:System.ServiceModel.MessageHeaderException">引数で指定されたヘッダーが複数回あります。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String,System.String[])">
      <summary>ヘッダー要素の LocalName、名前空間 URI、およびアクターを指定して、このコレクション内のメッセージ ヘッダーを検索します。</summary>
      <returns>このコレクションでメッセージ ヘッダーが見つかった場合はそのインデックス。指定されたヘッダーが存在しない場合は -1。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="actors">メッセージ ヘッダーで対象とされている受信先。</param>
      <exception cref="T:System.ArgumentNullException">引数は null です。</exception>
      <exception cref="T:System.ServiceModel.MessageHeaderException">引数で指定されたヘッダーが複数回あります。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.From">
      <summary>メッセージを送信したノードのアドレスを取得または設定します。</summary>
      <returns>メッセージを送信したノードの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。このメソッドは継承できません。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32)">
      <summary>このコレクション内の特定の位置にあるメッセージ ヘッダーを取得します。</summary>
      <returns>指定されたインデックスのメッセージ ヘッダー。</returns>
      <param name="index">取得するヘッダーを表す、0 から始まるインデックス。</param>
      <typeparam name="T">メッセージ ヘッダーの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>このコレクション内の特定の位置にあるメッセージ ヘッダーを取得します。</summary>
      <returns>指定されたインデックスのメッセージ ヘッダー。</returns>
      <param name="index">取得するヘッダーを表す、0 から始まるインデックス。</param>
      <param name="serializer">ヘッダーのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">メッセージ ヘッダーの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String)">
      <summary>ヘッダー要素の LocalName と名前空間 URI を指定して、このコレクション内のメッセージ ヘッダーを検索します。</summary>
      <returns>指定された名前を持つメッセージ ヘッダー。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <typeparam name="T">メッセージ ヘッダーの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>LocalName、名前空間 URI、およびシリアライザーを指定して、このコレクション内のメッセージ ヘッダーを取得します。</summary>
      <returns>指定された名前を持つメッセージ ヘッダー。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="serializer">ヘッダーのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">メッセージ ヘッダーの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.String[])">
      <summary>ヘッダー要素の LocalName、名前空間 URI、およびアクターを指定して、このコレクション内のメッセージ ヘッダーを取得します。</summary>
      <returns>指定された名前を持つメッセージ ヘッダー。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="actors">メッセージ ヘッダーで対象とされている受信先。</param>
      <typeparam name="T">メッセージ ヘッダーの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader(System.Int32)">
      <summary>コレクションの指定した位置にあるメッセージ ヘッダーを使用する XML ディクショナリ リーダーを取得します。</summary>
      <returns>コレクションの指定した位置にあるメッセージ ヘッダーを使用する <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</returns>
      <param name="headerIndex">取得するヘッダーを表す、0 から始まるインデックス。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood">
      <summary>MustUnderstand に設定されているすべてのメッセージ ヘッダーが適切に解釈されて処理されたかどうかを検証します。</summary>
      <returns>
        <paramref name="actors" /> で指定された受信先が、MustUnderstand でマークされているすべてのメッセージ ヘッダーを適切に解釈して処理した場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood(System.String[])">
      <summary>指定した受信先が、MustUnderstand でマークされているすべてのメッセージ ヘッダーを適切に解釈して処理したかどうかを検証します。</summary>
      <returns>
        <paramref name="actors" /> で指定された受信先が、MustUnderstand でマークされているすべてのメッセージ ヘッダーを適切に解釈して処理した場合は true。それ以外の場合は false。</returns>
      <param name="actors">メッセージ ヘッダーで対象とされている受信先。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Insert(System.Int32,System.ServiceModel.Channels.MessageHeader)">
      <summary>コレクション内の指定したインデックス位置に、メッセージ ヘッダーを挿入します。</summary>
      <param name="headerIndex">
        <paramref name="header" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="header">挿入するメッセージ ヘッダー。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Item(System.Int32)">
      <summary>指定したインデックス位置にあるヘッダーを取得します。</summary>
      <returns>コレクション内の <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" />。<paramref name="index" /> がリスト内のヘッダー数以上の場合は、null を返します。</returns>
      <param name="index">リスト内のヘッダーの 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageId">
      <summary>メッセージの一意の ID を取得または設定します。</summary>
      <returns>メッセージの一意の ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageVersion">
      <summary>メッセージの SOAP バージョンを取得します。</summary>
      <returns>メッセージの SOAP バージョンである <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.RelatesTo">
      <summary>このメッセージに関連するメッセージの ID を取得します。</summary>
      <returns>このメッセージに関連するメッセージの ID。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAll(System.String,System.String)">
      <summary>指定した名前および名前空間のすべてのヘッダーを、コレクションから削除します。</summary>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAt(System.Int32)">
      <summary>コレクション内の指定したインデックス位置にあるメッセージ ヘッダーを削除します。</summary>
      <param name="headerIndex">削除するヘッダーの 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.ReplyTo">
      <summary>要求の応答の送信先となるノードのアドレスを取得または設定します。</summary>
      <returns>要求の応答の送信先となるノードの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.SetAction(System.Xml.XmlDictionaryString)">
      <summary>ヘッダーのアクション要素を設定します。</summary>
      <param name="action">メッセージの処理方法の説明。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。このメソッドは継承できません。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.To">
      <summary>メッセージの送信先エンドポイントを取得または設定します。</summary>
      <returns>メッセージの送信先エンドポイントを格納する URI。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>指定した XML ライターを使用して、指定した位置からのヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化されるヘッダーを表す、0 から始まるインデックス。</param>
      <param name="writer">ヘッダーのシリアル化に使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>指定した XML ライターを使用して、指定した位置からのヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化されるヘッダーを表す、0 から始まるインデックス。</param>
      <param name="writer">ヘッダーのシリアル化に使用される <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>指定した XML ライターを使用して、指定したヘッダーの内容をシリアル化します。</summary>
      <param name="headerIndex">シリアル化されるヘッダーを表す、0 から始まるインデックス。</param>
      <param name="writer">ヘッダーの内容をシリアル化するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlWriter)">
      <summary>指定した XML ライターを使用して、指定したヘッダーの内容をシリアル化します。</summary>
      <param name="headerIndex">シリアル化されるヘッダーを表す、0 から始まるインデックス。</param>
      <param name="writer">ヘッダーの内容をシリアル化するために使用される <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>指定した XML ライターを使用して、開始ヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化されるヘッダーを表す、0 から始まるインデックス。</param>
      <param name="writer">開始ヘッダーをシリアル化するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>指定した XML ライターを使用して、開始ヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化されるヘッダーを表す、0 から始まるインデックス。</param>
      <param name="writer">開始ヘッダーをシリアル化するために使用される <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageProperties">
      <summary>メッセージの一連のプロパティを表します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor(System.ServiceModel.Channels.MessageProperties)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> クラスの新しいインスタンスを、事前設定されたプロパティを使用して初期化します。</summary>
      <param name="properties">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" />
      </param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Add(System.String,System.Object)">
      <summary>指定した名前およびプロパティを持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> コレクションに追加します。</summary>
      <param name="name">追加する要素の名前。</param>
      <param name="property">追加する要素の値。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching">
      <summary>トランスポートに渡す前にこのメッセージを格納するかどうかを指定する値を取得または設定します。</summary>
      <returns>送信メッセージのバッチが許可される場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Clear">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> コレクションからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.ContainsKey(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に特定の名前、キー、または識別子が含まれるかどうかを判断します。</summary>
      <returns>指定した <paramref name="name" /> を持つ要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="name">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内で検索する名前、キー、または識別子。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.CopyProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>指定した <see cref="T:System.ServiceModel.Channels.MessageProperties" /> の内容をこのインスタンスにコピーします。</summary>
      <param name="properties">コピー元の <see cref="T:System.ServiceModel.Channels.MessageProperties" /> オブジェクト。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Count">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> のプロパティの合計数を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> のプロパティの合計数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Dispose">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> クラスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Encoder">
      <summary>ストリームへのメッセージの書き込みおよびストリームからのメッセージの読み取りに使用されるエンコーダーを取得します。</summary>
      <returns>ストリームへのメッセージの書き込みおよびストリームからのメッセージの読み取りに使用される <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsFixedSize">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> が固定サイズの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Item(System.String)">
      <summary>指定された名前、ID、またはキー値を持つプロパティを取得します。</summary>
      <returns>指定した <paramref name="name" /> のプロパティ。そのようなプロパティが存在しない場合は null。</returns>
      <param name="name">コレクションから取得するプロパティの名前。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Keys">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Remove(System.String)">
      <summary>指定した名前を持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> から削除します。</summary>
      <returns>指定した <paramref name="name" /> を持つ要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に格納され、削除可能である場合は true。それ以外の場合は false。</returns>
      <param name="name">削除する要素の名前。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定した名前およびプロパティを持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に追加します。</summary>
      <param name="pair">追加する要素の名前と値が格納されているキー/値ペア。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に特定の名前が格納されているかどうかを判断します。</summary>
      <returns>
        <paramref name="pair" /> に指定した名前と値を持つ要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="pair">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> で検索する要素の名前と値が格納されているキー/値ペア。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した <see cref="T:System.ServiceModel.Channels.MessageProperties" /> の内容を配列にコピーします。</summary>
      <param name="array">コレクションのコピー先の <see cref="T:System.Array" />。</param>
      <param name="index">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>このプロパティのセットが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>このプロパティ セットが読み取り専用の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定した名前を持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> から削除します。</summary>
      <returns>
        <paramref name="pair" /> パラメーターに指定した名前と値を持つ要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に格納され、削除可能である場合は true。それ以外の場合は false。</returns>
      <param name="pair">削除する要素の名前と値が格納されているキー/値ペア。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.TryGetValue(System.String,System.Object@)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に特定の名前が格納されているかどうかを判断し、その値を取得します。</summary>
      <returns>指定した <paramref name="name" /> を持つ要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="name">検索する要素の名前。</param>
      <param name="value">見つかった要素の値。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Values">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内の値を格納している <see cref="T:System.Collections.ICollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内の値を格納している <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Via">
      <summary>メッセージを送信するために使用するトランスポート アドレスを取得または設定します。</summary>
      <returns>メッセージを送信するために使用するトランスポート アドレスを含む URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageState">
      <summary>メッセージのステータスを指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Closed">
      <summary>メッセージは閉じられているため、アクセスできません。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Copied">
      <summary>メッセージはコピーされています。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Created">
      <summary>メッセージは作成されています。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Read">
      <summary>メッセージは読み取られています。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Written">
      <summary>メッセージは書き込まれています。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageVersion">
      <summary>メッセージとその交換に関連付けられている SOAP と WS-Addressing のバージョンを指定します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Addressing">
      <summary>現在のメッセージ バージョンに関連付けられている WS-Addressing のバージョンを取得または設定します。</summary>
      <returns>現在のメッセージ バージョンに関連付けられている <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion)">
      <summary>WS-Addressing 1.0 と指定した SOAP バージョンを使用して、メッセージ バージョン オブジェクトを作成します。</summary>
      <returns>指定したバージョンの SOAP と WS-Addressing 1.0 を使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <param name="envelopeVersion">使用する SOAP バージョンを示す <see cref="T:System.ServiceModel.EnvelopeVersion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeVersion" /> は null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion,System.ServiceModel.Channels.AddressingVersion)">
      <summary>指定したバージョンの SOAP と WS-Addressing を使用して、メッセージ バージョン オブジェクトを作成します。</summary>
      <returns>指定したバージョンの WS-Addressing と SOAP を使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <param name="envelopeVersion">SOAP のバージョンを示す <see cref="T:System.ServiceModel.EnvelopeVersion" />。</param>
      <param name="addressingVersion">WS-Addressing のバージョンを示す <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeVersion" /> または <paramref name="addressingVersion" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Default">
      <summary>Windows Communication Foundation (WCF) が使用する既定のメッセージ バージョンを取得します。</summary>
      <returns>WS-Addressing 1.0 と SOAP1.2 を使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Envelope">
      <summary>現在のメッセージ バージョンに関連付けられている SOAP バージョンを取得します。</summary>
      <returns>現在のメッセージ バージョンに関連付けられている <see cref="T:System.ServiceModel.EnvelopeVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.Equals(System.Object)">
      <summary>現在のメッセージ バージョンが、指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトが現在の <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のメッセージ バージョンと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.GetHashCode">
      <summary>現在のメッセージ バージョンに対するハッシュ コードを取得します。</summary>
      <returns>現在の <see cref="T:System.ServiceModel.Channels.MessageVersion" /> の一意のハッシュ コード。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.None">
      <summary>SOAP または WS-Addressing を使用しないメッセージ バージョンを取得します。</summary>
      <returns>SOAP または WS-Addressing を使用しない <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11">
      <summary>SOAP 1.1 を使用するメッセージ バージョンを取得します。</summary>
      <returns>SOAP 1.1 を使用しているが WS-Addressing のバージョンがない <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10">
      <summary>WS-Addressing 1.0 および SOAP 1.2 を使用するメッセージ バージョンを取得します。</summary>
      <returns>WS-Addressing 1.0 および SOAP 1.2 の各バージョンを使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.ToString">
      <summary>現在のメッセージ バージョンの文字列形式を返します。</summary>
      <returns>現在のメッセージ バージョンの文字列形式。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RequestContext">
      <summary>受信要求に関連付けられた応答を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.RequestContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Abort">
      <summary>派生クラスでオーバーライドされると、コンテキストに関連付けられている要求の処理を中止します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>派生クラスでオーバーライドされると、現在のコンテキストに関連付けられている要求に応答する非同期操作を開始します。</summary>
      <returns>非同期応答操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要求を格納している受信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">非同期応答操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期応答操作に関連付けられている状態情報を保持するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>派生クラスでオーバーライドされると、指定した時間内で現在のコンテキストに関連付けられている要求に応答する非同期操作を開始します。</summary>
      <returns>非同期応答操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要求を格納している受信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">利用可能な要求への応答を待機する時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期応答操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期応答操作に関連付けられている状態情報を保持するオブジェクト。アプリケーションで指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close">
      <summary>派生クラスでオーバーライドされると、現在のコンテキストに関連付けられている要求コンテキストに応答している操作を閉じます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close(System.TimeSpan)">
      <summary>派生クラスでオーバーライドされると、指定した時間内で現在のコンテキストに関連付けられている要求コンテキストに応答している操作を閉じます。</summary>
      <param name="timeout">現在のコンテキストに関連付けられている応答操作を閉じる制限時間を指定する <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Dispose(System.Boolean)">
      <summary>コンテキストに関連付けられたリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.EndReply(System.IAsyncResult)">
      <summary>派生クラスでオーバーライドされると、要求メッセージに応答する非同期操作を完了します。</summary>
      <param name="result">いずれかの <see cref="Overload:System.ServiceModel.Channels.RequestContext.BeginReply" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message)">
      <summary>派生クラスでオーバーライドされると、要求メッセージに応答します。</summary>
      <param name="message">要求を格納している受信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>派生クラスでオーバーライドされると、指定した時間内に要求メッセージに応答します。</summary>
      <param name="message">要求を格納している受信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">要求への応答を待機する時間を指定する <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RequestContext.RequestMessage">
      <summary>派生クラスでオーバーライドされると、要求を格納しているメッセージを取得します。</summary>
      <returns>要求を格納している <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.System#IDisposable#Dispose">
      <summary>コンテキストに関連付けられているマネージ リソースとアンマネージ リソースの両方を解放します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement">
      <summary>テキストベースの SOAP メッセージで使用される、文字エンコーディングおよびメッセージのバージョン管理を指定するバインド要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>指定したメッセージ バージョンとエンコーディングを使用して、<see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="messageVersion">メッセージ バージョンで使用される <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</param>
      <param name="writeEncoding">メッセージの文字の書式設定に使用される <see cref="T:System.Text.Encoding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> または <paramref name="writeEncoding" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> の値が無効です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定したコンテキストに対して指定した種類のチャネルを作成するチャネル ファクトリ スタックをクライアント上に作成します。</summary>
      <returns>指定したコンテキストの <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">チャネルの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.Clone">
      <summary>新しい <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> オブジェクトを作成し、現在のオブジェクトを使用して初期化します。</summary>
      <returns>現在の要素と同じプロパティ値が設定された <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>現在のエンコーディング バインド要素で指定されているメッセージ バージョンと文字エンコーディングを使用する、テキスト メッセージ エンコーダー用のファクトリを作成します。</summary>
      <returns>このファクトリが作成する <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>バインド要素スタックの適切な層から、要求のあった型指定されたオブジェクト (ある場合) を返します。</summary>
      <returns>要求のあった型指定されたオブジェクト <paramref name="T" /> が存在する場合は、そのオブジェクト。存在しない場合は、null。</returns>
      <param name="context">バインド要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MessageVersion">
      <summary>テキスト メッセージの書式設定に使用される SOAP および WS-Addressing のバージョンを取得または設定します。</summary>
      <returns>メッセージの書式設定に使用される <see cref="T:System.ServiceModel.Channels.MessageVersion" />。既定値は <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" /> です。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.ReaderQuotas">
      <summary>このバインディングで構成されたエンドポイントにより処理可能な、SOAP メッセージの複雑さに対する制約を取得または設定します。</summary>
      <returns>交換される SOAP メッセージに対する複雑さの制約を指定する <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。これらの制約の既定値については、後の「解説」で説明します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.WriteEncoding">
      <summary>テキスト メッセージの文字の書式設定に使用されるエンコーディングを取得または設定します。</summary>
      <returns>テキスト メッセージの文字の書式設定に使用される <see cref="T:System.Text.Encoding" />。既定のテキスト エンコーディングは UTF-8 形式です。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> の値が無効です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElement">
      <summary>トランスポート バインド要素を表す abstract 基本クラス。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor">
      <summary>このクラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor(System.ServiceModel.Channels.TransportBindingElement)">
      <summary>既存のインスタンスを使用して、このクラスの新しいインスタンスを作成します。</summary>
      <param name="elementToBeCloned">複製する <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定した <see cref="T:System.ServiceModel.Channels.BindingContext" /> からプロパティを取得します。</summary>
      <returns>指定した <see cref="T:System.ServiceModel.Channels.BindingContext" /> のプロパティ。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />
      </param>
      <typeparam name="T">取得するプロパティ。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing">
      <summary>メッセージの手動アドレス指定が必要かどうかを示す値を取得または設定します。</summary>
      <returns>メッセージの手動アドレスが必要である場合は true、それ以外の場合は  false。既定値は、false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize">
      <summary>受信できる最大メッセージ サイズ (バイト単位) を取得または設定します。</summary>
      <returns>受信できる最大メッセージ サイズ。既定値は 65,536 バイトです。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.Scheme">
      <summary>トランスポートの URI スキームを取得します。</summary>
      <returns>トランスポートの URI スキームを返します。値は、このメソッドを実装する派生クラスにより異なります。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ClientCredentials">
      <summary>クライアントとサービスの資格情報、および、クライアント側の通信で使用するサービス資格情報の認証設定をユーザーが構成できるようにします。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Description.ClientCredentials" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <summary>これはコピー コンストラクターです。</summary>
      <param name="other">
        <see cref="T:System.ServiceModel.Description.ClientCredentials" />新しく構築されたインスタンスのすべてのプロパティに、このパラメーターの値が反映されます。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>指定したクライアント動作をエンドポイントに適用します。</summary>
      <param name="serviceEndpoint">指定したクライアント動作を適用するエンドポイント。</param>
      <param name="behavior">指定したエンドポイントに適用するクライアント動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceEndpoint" /> または <paramref name=" behavior" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.Clone">
      <summary>この <see cref="T:System.ServiceModel.Description.ClientCredentials" /> インスタンスの新しいコピーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.ClientCredentials" /> のインスタンス。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.CloneCore">
      <summary>この <see cref="T:System.ServiceModel.Description.ClientCredentials" /> インスタンスの新しいコピーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.ClientCredentials" /> のインスタンス。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.HttpDigest">
      <summary>現在の HTTP ダイジェスト資格情報を取得します。</summary>
      <returns>HTTP ダイジェスト認証方法が選択されているときに、クライアントがサービスに対して自身を認証するために使用する資格情報を表す <see cref="T:System.ServiceModel.Security.HttpDigestClientCredential" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>バインド パラメーターのコレクションにこのクラスのこのインスタンスを追加します。</summary>
      <param name="serviceEndpoint">追加する <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
      <param name="bindingParameters">バインディング パラメーターのコレクション。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>エンドポイント全体にわたってサービスの変更または拡張を実装します。</summary>
      <param name="serviceEndpoint">コントラクトを公開するエンドポイント。</param>
      <param name="endpointDispatcher">変更または拡張対象のエンドポイント ディスパッチャー。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>将来使用するために予約されています。</summary>
      <param name="serviceEndpoint">検証対象の <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.UserName">
      <summary>クライアントがサービスに対して自身を認証するために使用するユーザー名とパスワードを設定するために使用する資格情報オブジェクトを取得します。</summary>
      <returns>現在の UserName 資格情報を表す <see cref="T:System.ServiceModel.Security.UserNamePasswordClientCredential" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.Windows">
      <summary>クライアントがサービスに対して自身を認証するために使用する Windows 資格情報の制御に使用されるオブジェクトを取得します。</summary>
      <returns>現在の Windows 資格情報を表す <see cref="T:System.ServiceModel.Security.WindowsClientCredential" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ContractDescription">
      <summary>エンドポイントが外部と通信する内容を指定する Windows Communication Foundation (WCF) コントラクトを記述します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)">
      <summary>指定した名前を使用して、<see cref="T:System.ServiceModel.Description.ContractDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コントラクトの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空です。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)">
      <summary>指定した名前空間の限定名を使用して、<see cref="T:System.ServiceModel.Description.ContractDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コントラクトの名前。</param>
      <param name="ns">コントラクトの名前を格納している名前空間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は null なので、</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空です。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.CallbackContractType">
      <summary>コントラクトの説明で指定されているコールバック コントラクトの型を取得または設定します。</summary>
      <returns>コントラクトの説明で指定されているコールバック コントラクトの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ConfigurationName">
      <summary>コントラクトの説明の構成名を取得または設定します。</summary>
      <returns>コントラクトの構成名。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractBehaviors">
      <summary>コントラクトの動作のコレクションを取得します。</summary>
      <returns>コントラクトの動作のコレクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractType">
      <summary>コントラクトの説明で指定されたコントラクトの型を取得または設定します。</summary>
      <returns>コントラクトの説明で指定されたコントラクトの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Name">
      <summary>コントラクトの名前を取得または設定します。</summary>
      <returns>コントラクトの説明の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Namespace">
      <summary>コントラクトの名前空間を取得または設定します。</summary>
      <returns>コントラクトの名前空間。</returns>
      <exception cref="T:System.ArgumentNullException">設定値は null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Operations">
      <summary>コントラクトに関連付けられている操作の説明のコレクションを取得します。</summary>
      <returns>コントラクトの説明に関連付けられている操作の説明を格納している <see cref="T:System.ServiceModel.Description.OperationDescriptionCollection" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior">
      <summary>
        <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> のランタイム動作を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
      <summary>指定した操作の説明を使用して、<see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation">操作を表す <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.DataContractFormatAttribute)">
      <summary>指定した操作の説明とデータ コントラクト形式を使用して、<see cref="T:System.ServiceModel.Description.DataContractSerializerOperationBehavior" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation">操作を表す <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="dataContractFormatAttribute">シリアル化プロセスの制御に使用される <see cref="T:System.ServiceModel.DataContractFormatAttribute" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
      <summary>シリアル化プロセスおよび逆シリアル化プロセスのために、<see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> を継承するクラスのインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> クラスを継承するクラスのインスタンス。</returns>
      <param name="type">シリアライザーを作成する対象の <see cref="T:System.Type" />。</param>
      <param name="name">生成される型の名前。</param>
      <param name="ns">生成される型の名前空間。</param>
      <param name="knownTypes">既知の型を含む <see cref="T:System.Type" /> の <see cref="T:System.Collections.Generic.IList`1" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
      <summary>名前空間を含む <see cref="T:System.Xml.XmlDictionaryString" /> を使用して、シリアル化プロセスおよび逆シリアル化プロセスのために、<see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> を継承するクラスのインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> クラスを継承するクラスのインスタンス。</returns>
      <param name="type">シリアル化または逆シリアル化する型。</param>
      <param name="name">シリアル化される型の名前。</param>
      <param name="ns">シリアル化される型の名前空間を含む <see cref="T:System.Xml.XmlDictionaryString" />。</param>
      <param name="knownTypes">既知の型を含む <see cref="T:System.Type" /> の <see cref="T:System.Collections.Generic.IList`1" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.DataContractFormatAttribute">
      <summary>操作に関連付けられた <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> を取得します。</summary>
      <returns>操作に関連付けられた <see cref="T:System.ServiceModel.DataContractFormatAttribute" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.DataContractResolver">
      <summary>シリアル化プロセスおよび逆シリアル化プロセスの際に型を動的にマップするために使用される <see cref="T:System.Runtime.Serialization.DataContractResolver" /> の実装を取得または設定します。</summary>
      <returns>「<see cref="T:System.Runtime.Serialization.DataContractResolver" />」と入力します。xsi:type を既知のデータ コントラクト型にマップするクラス。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DataContractSerializerOperationBehavior.MaxItemsInObjectGraph">
      <summary>シリアル化または逆シリアル化するオブジェクト グラフ内の項目の最大数を取得または設定します。</summary>
      <returns>シリアル化または逆シリアル化するオブジェクト グラフ内の項目の最大数。既定値は、<see cref="F:System.Int32.MaxValue" /> です。</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>動作にパラメーターのコレクションを追加します。</summary>
      <param name="description">パラメーターを追加する <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="parameters">追加するパラメーターを含む <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>操作にクライアントの動作を関連付けます。</summary>
      <param name="description">操作を表す <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="proxy">クライアントを表す <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>操作に動作を適用します。</summary>
      <param name="description">操作を表す <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <param name="dispatch">動作を関連付ける <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.DataContractSerializerOperationBehavior.System#ServiceModel#Description#IOperationBehavior#Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>操作を検証します。</summary>
      <param name="description">検証対象の操作を表す <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescription">
      <summary>SOAP エラーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescription.#ctor(System.String)">
      <summary>指定したアクションの値を使用して、<see cref="T:System.ServiceModel.Description.FaultDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">SOAP エラー メッセージのアクション。</param>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Action">
      <summary>SOAP エラー メッセージのアクションの値。</summary>
      <returns>SOAP エラーのアクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.DetailType">
      <summary>SOAP エラーの詳細な型。</summary>
      <returns>シリアル化可能な詳細オブジェクトの型。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Name">
      <summary>SOAP エラーの名前を取得または設定します。</summary>
      <returns>SOAP エラーの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Namespace">
      <summary>SOAP エラーの名前空間を取得または設定します。</summary>
      <returns>SOAP エラーの名前空間。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescriptionCollection">
      <summary>コントラクトの SOAP エラーに関する情報を取得するために使用できる <see cref="T:System.ServiceModel.Description.FaultDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.IContractBehavior">
      <summary>サービスまたはクライアント アプリケーションでコントラクトのランタイム動作を拡張するために使用できるメソッドを実装します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>任意のバインド要素を、コントラクトの動作をサポートするように構成します。</summary>
      <param name="contractDescription">変更するコントラクトの説明。</param>
      <param name="endpoint">変更するエンドポイント。</param>
      <param name="bindingParameters">動作をサポートするためにバインド要素が要求するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>コントラクト全体にわたってクライアントの変更または拡張を実装します。</summary>
      <param name="contractDescription">拡張対象のコントラクトの説明。</param>
      <param name="endpoint">終点。</param>
      <param name="clientRuntime">クライアント ランタイム。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>コントラクト全体にわたってクライアントの変更または拡張を実装します。</summary>
      <param name="contractDescription">変更するコントラクトの説明。</param>
      <param name="endpoint">コントラクトを公開するエンドポイント。</param>
      <param name="dispatchRuntime">サービス実行を制御するディスパッチ ランタイム。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>コントラクトおよびエンドポイントがコントラクトの動作をサポートしていることを確認するために実装します。</summary>
      <param name="contractDescription">検証対象のコントラクト。</param>
      <param name="endpoint">検証対象のエンドポイント。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IEndpointBehavior">
      <summary>サービスまたはクライアント アプリケーションでエンドポイントのランタイム動作を拡張するために使用できるメソッドを実装します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>実行時にバインドにデータを渡して、バインドがカスタム動作をサポートできるようにするために実装します。</summary>
      <param name="endpoint">変更するエンドポイント。</param>
      <param name="bindingParameters">動作をサポートするためにバインド要素が要求するオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>エンドポイント全体にわたってクライアントの変更または拡張を実装します。</summary>
      <param name="endpoint">カスタマイズ対象のエンドポイント。</param>
      <param name="clientRuntime">カスタマイズ対象のクライアント ランタイム。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>エンドポイント全体にわたってサービスの変更または拡張を実装します。</summary>
      <param name="endpoint">コントラクトを公開するエンドポイント。</param>
      <param name="endpointDispatcher">変更または拡張対象のエンドポイント ディスパッチャー。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>エンドポイントが指定した基準を満たしていることを確認するために実装します。</summary>
      <param name="endpoint">検証対象のエンドポイント。</param>
    </member>
    <member name="T:System.ServiceModel.Description.IOperationBehavior">
      <summary>サービスまたはクライアント アプリケーションで操作のランタイム動作を拡張するために使用できるメソッドを実装します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>実行時にバインドにデータを渡して、バインドがカスタム動作をサポートできるようにするために実装します。</summary>
      <param name="operationDescription">検査されている操作。検査でのみ使用します。操作の説明が変更される場合、結果は未定義です。</param>
      <param name="bindingParameters">動作をサポートするためにバインディング要素が要求するオブジェクトのコレクション。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>操作全体にわたってクライアントの変更または拡張を実装します。</summary>
      <param name="operationDescription">検査されている操作。検査でのみ使用します。操作の説明が変更される場合、結果は未定義です。</param>
      <param name="clientOperation">
        <paramref name="operationDescription" /> で説明されている操作のカスタマイズ プロパティを公開するランタイム オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>操作全体にわたってサービスの変更または拡張を実装します。</summary>
      <param name="operationDescription">検査されている操作。検査でのみ使用します。操作の説明が変更される場合、結果は未定義です。</param>
      <param name="dispatchOperation">
        <paramref name="operationDescription" /> で説明されている操作のカスタマイズ プロパティを公開するランタイム オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>操作が指定した基準を満たしていることを確認するために実装します。</summary>
      <param name="operationDescription">検査されている操作。検査でのみ使用します。操作の説明が変更される場合、結果は未定義です。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageBodyDescription">
      <summary>SOAP メッセージの本文を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageBodyDescription.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessageBodyDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.Parts">
      <summary>SOAP メッセージの本文の部分を取得します。</summary>
      <returns>検査または変更できる本文部分。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.ReturnValue">
      <summary>戻り値を含む SOAP メッセージの部分を取得または設定します。</summary>
      <returns>戻り値の値 (存在する場合)。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperName">
      <summary>SOAP 本文要素内にラッパー要素がある場合に、その名前を取得または設定します。</summary>
      <returns>ラッパー要素 (存在する場合)。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperNamespace">
      <summary>SOAP 本文内にラッパー要素がある場合に、その名前空間を取得または設定します。</summary>
      <returns>ラッパー要素の名前空間 (存在する場合)。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescription">
      <summary>メッセージの説明を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.#ctor(System.String,System.ServiceModel.Description.MessageDirection)">
      <summary>指定したアクションと方向を使用して、<see cref="T:System.ServiceModel.Description.MessageDescription" /> クラスのインスタンスを初期化します。</summary>
      <param name="action">メッセージの目的を示す、SOAP メッセージのアクション パラメーター。</param>
      <param name="direction">メッセージが受信の場合は <see cref="F:System.ServiceModel.Description.MessageDirection.Input" />。送信の場合は <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> が <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> でも <see cref="F:System.ServiceModel.Description.MessageDirection.Output" /> でもありません。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Action">
      <summary>メッセージの目的を示す、SOAP メッセージのアクション パラメーターを取得または設定します。</summary>
      <returns>アクション URI を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Body">
      <summary>SOAP メッセージの本文を取得します。</summary>
      <returns>メッセージの本文を含んでいる <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Direction">
      <summary>メッセージが受信と送信のどちらであるかを示す方向を取得します。</summary>
      <returns>メッセージがサービス側から見て受信と送信のどちらであるかを示す <see cref="T:System.ServiceModel.Description.MessageDirection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Headers">
      <summary>SOAP メッセージのヘッダーの説明を取得します。</summary>
      <returns>SOAP メッセージのヘッダーの説明を含んでいる <see cref="T:System.ServiceModel.Description.MessageHeaderDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.MessageType">
      <summary>メッセージ コントラクトの種類を識別する型を取得または設定します。</summary>
      <returns>メッセージ コントラクトの種類を識別する <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Properties">
      <summary>SOAP メッセージのプロパティの説明を取得します。</summary>
      <returns>SOAP メッセージのプロパティの説明を含んでいる <see cref="T:System.ServiceModel.Description.MessagePropertyDescriptionCollection" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescriptionCollection">
      <summary>コントラクトに属する操作を構成するメッセージの説明を格納するために使用されるコレクションを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.Find(System.String)">
      <summary>コレクション内の、指定したアクションを含むメッセージに対する最初のメッセージの説明を検索して返します。</summary>
      <returns>コレクション内の、指定した <paramref name="action" /> を含むメッセージに対する最初の <see cref="T:System.ServiceModel.Description.MessageDescription" />。一致する <paramref name="action" /> がない場合は null。</returns>
      <param name="action">検索するメッセージのアクション。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.FindAll(System.String)">
      <summary>コレクション内の、指定したアクションを含むメッセージに対するメッセージの説明をすべて検索して返します。</summary>
      <returns>現在のコレクション内の、指定した <paramref name="action" /> を含むメッセージに対するコレクションのメッセージの説明を格納している <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />。一致する <see cref="T:System.ServiceModel.Description.MessageDescription" /> オブジェクトがない場合は、空のコレクションが返されます。</returns>
      <param name="action">検索するメッセージのアクション。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDirection">
      <summary>メッセージの方向を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Input">
      <summary>メッセージは受信されます。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Output">
      <summary>メッセージは送信されます。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessageHeaderDescription">
      <summary>SOAP メッセージ ヘッダーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageHeaderDescription.#ctor(System.String,System.String)">
      <summary>指定した修飾名を使用して、<see cref="T:System.ServiceModel.Description.MessageHeaderDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.Actor">
      <summary>メッセージ ヘッダーの目的の受信先を取得または設定します。</summary>
      <returns>メッセージ ヘッダーの想定されている受信先を示す URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.MustUnderstand">
      <summary>SOAP 1.1/1.2 仕様に従って、ヘッダーを認識する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>メッセージ ヘッダーの処理が必須である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.Relay">
      <summary>ヘッダーの転送が必要かどうかを示す値を取得します。</summary>
      <returns>メッセージ ヘッダーを転送できる場合は true、それ以外の場合は false。既定値は、SOAP 1.1 仕様に準拠した false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageHeaderDescription.TypedHeader">
      <summary>メッセージ ヘッダーがメッセージ コントラクト ヘッダーかどうかを示す値を取得または設定します。</summary>
      <returns>メッセージがメッセージ コントラクト ヘッダーである場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageHeaderDescriptionCollection">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessageHeaderDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageHeaderDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessageHeaderDescription)">
      <summary>派生クラスによって呼び出されると、メッセージ ヘッダーの <see cref="T:System.Xml.XmlQualifiedName" /> を返します。</summary>
      <returns>メッセージ ヘッダーの <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">検索する <see cref="T:System.ServiceModel.Description.MessageHeaderDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescription">
      <summary>SOAP メッセージ部分の記述を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescription.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">メッセージ部分の XML 名。</param>
      <param name="ns">メッセージ部分の XML 名前空間。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Index">
      <summary>メッセージ部分のインデックスを取得または設定します。</summary>
      <returns>メッセージ部分のインデックス。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.MemberInfo">
      <summary>メッセージ部分のメンバー情報を取得または設定します。</summary>
      <returns>このメッセージ部分のメンバー情報。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Multiple">
      <summary>メッセージ内にメッセージ部分を複数回含めることができるかどうかを制御する値を取得または設定します。</summary>
      <returns>複数回含めることができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Name">
      <summary>メッセージ部分の名前を取得または設定します。</summary>
      <returns>メッセージ部分の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Namespace">
      <summary>メッセージ部分の名前空間を取得または設定します。</summary>
      <returns>メッセージ部分の名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Type">
      <summary>メッセージ部分の型を取得または設定します。</summary>
      <returns>メッセージ部分の型。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescriptionCollection">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePartDescription)">
      <summary>派生クラスによって呼び出されると、<see cref="T:System.ServiceModel.Description.MessagePartDescription" /> の <see cref="T:System.Xml.XmlQualifiedName" /> を返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> の <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">検索する <see cref="T:System.ServiceModel.Description.MessagePartDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePropertyDescription">
      <summary>
        <see cref="T:System.ServiceModel.MessagePropertyAttribute" /> によって指定されたメッセージ プロパティを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePropertyDescription.#ctor(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">プロパティの名前。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePropertyDescriptionCollection">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePropertyDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePropertyDescription)">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> の <see cref="T:System.Xml.XmlQualifiedName" /> を返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" /> の <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">検索する <see cref="T:System.ServiceModel.Description.MessagePropertyDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescription">
      <summary>操作を構成するメッセージの説明を提供する、コントラクトの操作の説明を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.#ctor(System.String,System.ServiceModel.Description.ContractDescription)">
      <summary>指定した名前とコントラクトの説明を使用して、<see cref="T:System.ServiceModel.Description.OperationDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">操作の説明の名前。</param>
      <param name="declaringContract">操作の説明の初期化に使用される <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.DeclaringContract">
      <summary>操作が属するコントラクトを取得または設定します。</summary>
      <returns>操作の <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Faults">
      <summary>操作の説明に関連付けられているエラーの説明を取得します。</summary>
      <returns>操作の説明に関連付けられているエラーの詳細を含む <see cref="T:System.ServiceModel.Description.FaultDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsOneWay">
      <summary>操作が応答メッセージを返すかどうかを示す値を取得または設定します。</summary>
      <returns>このメソッドが要求メッセージを受け取り、応答メッセージを返さない場合は true、それ以外の場合は false。既定値は、false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.KnownTypes">
      <summary>操作の説明に関連付けられている既知の型を取得します。</summary>
      <returns>操作の説明に関連付けられている既知の型のコレクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Messages">
      <summary>操作を構成するメッセージの説明を取得または設定します。</summary>
      <returns>操作を構成するメッセージの説明を含む <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Name">
      <summary>操作の説明の名前を取得または設定します。</summary>
      <returns>操作の説明の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.OperationBehaviors">
      <summary>操作の動作のセットを取得します。</summary>
      <returns>操作の動作のセット。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.TaskMethod">
      <summary>タスク操作で使用するメソッドを取得または設定します。</summary>
      <returns>タスク操作で使用するメソッド。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescriptionCollection">
      <summary>操作の説明を含むコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.Find(System.String)">
      <summary>操作の説明のコレクションから、指定した名前の操作の説明を返します。</summary>
      <returns>指定した名前を持つ <see cref="T:System.ServiceModel.Description.OperationDescription" />。</returns>
      <param name="name">操作の名前。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.FindAll(System.String)">
      <summary>コレクションから、指定した名前を持つすべての操作の説明のコレクションを返します。</summary>
      <returns>指定した名前の操作の説明を含む <see cref="T:System.ServiceModel.Description.OperationDescription" /> 型の <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <param name="name">操作の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.InsertItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>操作の説明のコレクション内の指定したインデックス位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">挿入する <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> は null なので、</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.SetItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>コレクション内の指定したインデックス位置にある操作の説明の要素を置き換えます。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">設定する <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> は null なので、</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpoint">
      <summary>サービスのクライアントがサービスを検索してサービスと通信できるようにするサービス エンドポイントを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription)">
      <summary>指定したコントラクトの <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contract">サービス エンドポイントの <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定したコントラクト、バインド、およびアドレスを使用して、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contract">サービス エンドポイントの <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
      <param name="binding">サービス エンドポイントが通信を行う方法を指定する <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">サービス エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Address">
      <summary>サービス エンドポイントのエンドポイント アドレスを取得または設定します。</summary>
      <returns>サービス エンドポイントの位置を指定する <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Binding">
      <summary>サービス エンドポイントのバインドを取得または設定します。</summary>
      <returns>サービス エンドポイントの <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Contract">
      <summary>サービス エンドポイントのコントラクトを取得します。</summary>
      <returns>サービス エンドポイントのコントラクトを指定する <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.EndpointBehaviors">
      <summary>サービスのエンドポイントの動作を取得します。</summary>
      <returns>サービスのエンドポイント動作。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Name">
      <summary>サービス エンドポイントの名前を取得または設定します。</summary>
      <returns>サービス エンドポイントの名前。既定値は、バインド名とコントラクトの説明の名前を連結した値です。たとえば、<see cref="P:System.ServiceModel.Channels.Binding.Name" /> +'_' + <see cref="P:System.ServiceModel.Description.ContractDescription.Name" /> のようになります。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperation">
      <summary>クライアント オブジェクトまたはクライアント チャネル オブジェクトでの特定のコントラクト操作の実行動作を変更または拡張するために使用します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)">
      <summary>指定した <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名前、およびアクションの値を使用して、<see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">
        <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> の親オブジェクト。</param>
      <param name="name">操作の名前。</param>
      <param name="action">操作のアクション。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)">
      <summary>指定した <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名前、アクション、および応答アクションの値を使用して、<see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">
        <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> の親オブジェクト。</param>
      <param name="name">操作の名前。</param>
      <param name="action">操作のアクション。</param>
      <param name="replyAction">応答メッセージのアクション。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Action">
      <summary>操作のアクションを取得します。</summary>
      <returns>操作のアクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ClientParameterInspectors">
      <summary>クライアント呼び出しの前またはそれに続けてパラメーターを表示または変更するために使用されるパラメーター インスペクター オブジェクトのコレクションを取得します。</summary>
      <returns>クライアント呼び出しの前またはそれに続けてパラメーターを表示または変更するために使用されるパラメーター インスペクター オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> プロパティ値が応答メッセージの逆シリアル化に使用されるかどうかを示す値を取得または設定します。</summary>
      <returns>戻り値の型が <see cref="T:System.ServiceModel.Channels.Message" /> でない場合は true 。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter">
      <summary>オブジェクトをメッセージにシリアル化し、メッセージをオブジェクトに逆シリアル化するフォーマッタを取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" /> の実装。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay">
      <summary>操作が一方向の操作かどうかを示す値を取得または設定します。</summary>
      <returns>indigo2 クライアントが応答を待たない場合は true。それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Name">
      <summary>操作の名前を取得します。</summary>
      <returns>操作の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Parent">
      <summary>格納している <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> の親オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction">
      <summary>この操作の応答メッセージのアクションを取得します。</summary>
      <returns>応答のアクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> オブジェクトが送信メッセージをシリアル化するかどうかを指定する値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> プロパティが戻り値を応答メッセージにシリアル化する場合は true。それ以外の場合は false。既定値は、true です。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.TaskMethod">
      <summary>タスクに関連付けられているメソッドを取得または設定します。</summary>
      <returns>タスクに関連付けられているメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.TaskTResult">
      <summary>タスクに関連付けられたメソッドの結果の型を取得または設定します。</summary>
      <returns>タスクに関連付けられたメソッドの結果の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntime">
      <summary>クライアント アプリケーションによって処理されるすべてのメッセージの Windows Communication Foundation (WCF) クライアント オブジェクトの機能を拡張するクラスの挿入ポイントを表します。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ClientMessageInspectors">
      <summary>特定のサービス操作のメッセージを表示または変更するために使用されるメッセージ インスペクター オブジェクトのコレクションを取得します。</summary>
      <returns>特定のサービス操作のメッセージを表示または変更するために使用されるメッセージ インスペクター オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ClientOperations">
      <summary>特定のサービス操作のメッセージと動作を調査または変更する拡張オブジェクトを追加するために使用するクライアント操作オブジェクトのコレクションを取得します。</summary>
      <returns>特定のサービス操作のメッセージと動作を調査または変更する拡張オブジェクトを追加するために使用するクライアント操作オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractClientType">
      <summary>クライアントに関連付けられているコントラクトの型を取得または設定します。</summary>
      <returns>このクライアントに関連付けられたコントラクトを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractName">
      <summary>クライアントに関連付けられているコントラクトの名前を取得します。</summary>
      <returns>クライアントのコントラクト名。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractNamespace">
      <summary>クライアントに関連付けられているコントラクトの名前空間を取得します。</summary>
      <returns>クライアントに関連付けられているコントラクトの名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing">
      <summary>クライアントがアドレス指定ヘッダーを要求/応答メッセージに追加するかどうかを示す値を取得または設定します。</summary>
      <returns>クライアントがアドレス指定ヘッダーを追加しない場合は true、それ以外の場合は false。既定値は、false です。「解説」を参照してください。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize">
      <summary>最大エラー サイズを取得または設定します。</summary>
      <returns>最大エラー サイズを表す整数。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector">
      <summary>
        <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> を選択するために使用できる <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> の実装を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> を選択する <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations" /> コレクション内に対応する <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> のないメソッドのクライアント操作を取得します。</summary>
      <returns>操作セレクターがメッセージに一致する操作を見つけられないときに、現在のメッセージの内容のルーティング先メソッドを表す <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Via">
      <summary>クライアントを介してメッセージを送信するために使用するトランスポート アドレスを取得または設定します。</summary>
      <returns>トランスポートの送信先アドレスを表す <see cref="T:System.Uri" />。既定値は、クライアントの <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> 値です。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchOperation">
      <summary>サービス エンドポイントの特定のサービス操作の実行動作を変更または拡張するために使用します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)">
      <summary>指定したディスパッチ ランタイム、名前、およびアクションの値を使用して、<see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">関連付けられた <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> オブジェクト。</param>
      <param name="name">ディスパッチ操作の名前。<see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> コレクションのキーとして使用されます。</param>
      <param name="action">このディスパッチ操作が作成されている対象のメッセージ アクション。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Action">
      <summary>この操作のアクションの値を取得します。</summary>
      <returns>この操作のアクションの値。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters">
      <summary>パラメーターを自動的に破棄するかどうかを取得または設定します。</summary>
      <returns>パラメーターが自動的に破棄される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> プロパティ値が要求メッセージの逆シリアル化に使用されるかどうかを示す値を取得または設定します。</summary>
      <returns>戻り値の型が <see cref="T:System.ServiceModel.Channels.Message" /> で、Out パラメーターがない場合は false、それ以外の場合は true。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay">
      <summary>操作が一方向の操作かどうかを示す値を取得します。</summary>
      <returns>操作が入力だけの場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Name">
      <summary>操作の名前を取得します。</summary>
      <returns>操作の名前。<see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> コレクションのキーとして使用されます。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Parent">
      <summary>関連付けられた <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> オブジェクトを取得します。</summary>
      <returns>関連付けられた <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> オブジェクトが応答メッセージをシリアル化するかどうかを指定する値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> プロパティが戻り値を応答メッセージにシリアル化する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchRuntime">
      <summary>既定のサービス動作の変更や、カスタム オブジェクトの結合に使用できるプロパティを公開します。このカスタム オブジェクトで、受信メッセージをオブジェクトに変換して操作にディスパッチする方法を変更できます。このクラスは継承できません。</summary>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.EndpointDispatcher">
      <summary>メッセージに対するランタイム拡張機能または変更をサービス アプリケーションに挿入できるようにするプロパティを公開するランタイム オブジェクトを表します。</summary>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageFormatter">
      <summary>メッセージからオブジェクトへの変換、およびオブジェクトからクライアント アプリケーション用のメッセージへの変換を制御するためのメソッドを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>メッセージを、呼び出し操作に返される戻り値と out パラメーターに変換します。</summary>
      <returns>操作の戻り値。</returns>
      <param name="message">受信メッセージ。</param>
      <param name="parameters">任意の out 値。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])">
      <summary>
        <see cref="T:System.Object" /> 配列を送信 <see cref="T:System.ServiceModel.Channels.Message" /> に変換します。</summary>
      <returns>サービス操作に送信される SOAP メッセージ。</returns>
      <param name="messageVersion">使用する SOAP メッセージのバージョン。</param>
      <param name="parameters">WCF クライアント操作に渡されるパラメーター。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
      <summary>メッセージを表示または変更するために <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> コレクションに追加できる、メッセージ インスペクター オブジェクトを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
      <summary>応答メッセージを受信した後、それをクライアント アプリケーションに返信する前に、メッセージの検査と変更を実行できるようにします。</summary>
      <param name="reply">各種型に変換され、クライアント アプリケーションに戻されるメッセージ。</param>
      <param name="correlationState">相関状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
      <summary>要求メッセージをサービスに送信する前に、メッセージを検査または変更できるようにします。</summary>
      <returns>
        <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> メソッドの <paramref name="correlationState " /> 引数として返されるオブジェクト。相関状態を使用しない場合は null です。2 つの <paramref name="correlationState" /> オブジェクトが決して同じにならないように、これを <see cref="T:System.Guid" /> にすることをお勧めします。</returns>
      <param name="request">サービスに送信されるメッセージ。</param>
      <param name="channel">WCF クライアント オブジェクト チャネル。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientOperationSelector">
      <summary>操作セレクターのコントラクトを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IClientOperationSelector.AreParametersRequiredForSelection">
      <summary>選択を決定するためにパラメーターが必要かどうかを示す値を取得します。</summary>
      <returns>パラメーターが必要な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientOperationSelector.SelectOperation(System.Reflection.MethodBase,System.Object[])">
      <summary>選択された操作を返します。</summary>
      <returns>カスタムの操作セレクターによって選択された操作。</returns>
      <param name="method">呼び出すメソッド。</param>
      <param name="parameters">メソッドに渡すパラメーター。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IParameterInspector">
      <summary>クライアントまたはサービスでの呼び出しの前および後に情報を検査または変更できるようにする、カスタム パラメーター インスペクターによって実装されるコントラクトを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
      <summary>クライアントの呼び出しが返された後、サービス応答が送信される前に呼び出されます。</summary>
      <param name="operationName">呼び出された操作の名前。</param>
      <param name="outputs">出力オブジェクト。</param>
      <param name="returnValue">操作の戻り値。</param>
      <param name="correlationState">
        <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> から返された相関状態または null。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
      <summary>クライアントの呼び出しが送信される前、かつサービス応答が返された後に呼び出されます。</summary>
      <returns>
        <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" /> 内で <paramref name="correlationState" /> パラメーターとして返される相関状態。相関状態を使用しない場合は、null を返します。</returns>
      <param name="operationName">操作の名前。</param>
      <param name="inputs">クライアントからメソッドに渡されたオブジェクト。</param>
    </member>
    <member name="T:System.ServiceModel.Security.HttpDigestClientCredential">
      <summary>HTTP クライアントのダイジェスト認証に使用されます。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential">
      <summary>ダイジェスト ベースの認証に使用するネットワーク資格情報を取得または設定します。</summary>
      <returns>ダイジェスト ベースの認証に使用する <see cref="T:System.Net.NetworkCredential" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.MessageSecurityException">
      <summary>メッセージに適用されているセキュリティでエラーが発生したときに発生する例外を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String)">
      <summary>エラー文字列を使用して、<see cref="T:System.ServiceModel.Security.MessageSecurityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String,System.Exception)">
      <summary>エラー文字列と、この例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.Security.MessageSecurityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー メッセージ。</param>
      <param name="innerException">内部例外参照。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAccessDeniedException">
      <summary>セキュリティ承認要求が失敗した場合にスローされるセキュリティ例外を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
      <param name="innerException">使用される内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordClientCredential">
      <summary>ユーザー名とパスワードに基づくクライアントの資格情報を表します。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.Password">
      <summary>パスワードを取得または設定します。</summary>
      <returns>パスワード。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName">
      <summary>ユーザー名を取得または設定します。</summary>
      <returns>ユーザー名。</returns>
    </member>
    <member name="T:System.ServiceModel.Security.WindowsClientCredential">
      <summary>クライアントを表すために使用される Windows 資格情報に関連するプロパティを指定できます。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel">
      <summary>許可される偽装レベルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.WindowsClientCredential.ClientCredential">
      <summary>Windows クライアント資格情報を取得または設定します。</summary>
      <returns>クライアントの <see cref="T:System.Net.NetworkCredential" />。</returns>
    </member>
  </members>
</doc>