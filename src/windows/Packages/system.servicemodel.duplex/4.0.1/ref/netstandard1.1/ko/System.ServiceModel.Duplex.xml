<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Duplex</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.CallbackBehaviorAttribute">
      <summary>클라이언트 응용 프로그램에서 콜백 서비스 구현을 구성합니다.</summary>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.CallbackBehaviorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.  </summary>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.AutomaticSessionShutdown">
      <summary>서비스가 이중 세션을 닫을 때 자동으로 세션을 닫을지 여부를 지정합니다.</summary>
      <returns>서비스가 이중 세션을 닫을 때 이중 콜백 개체가 자동으로 세션을 닫으면 true이고, 그렇지 않으면 false입니다.기본값은 true입니다.</returns>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>콜백 동작을 지원하도록 바인딩 요소를 구성합니다.</summary>
      <param name="serviceEndpoint">콜백 개체의 끝점입니다.</param>
      <param name="parameters">구성되는 바인딩 매개 변수 컬렉션입니다.</param>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>콜백 개체를 지원하도록 클라이언트 런타임을 구성합니다.</summary>
      <param name="serviceEndpoint">특성에서 구성한 끝점입니다.</param>
      <param name="clientRuntime">특성이 구성하는 클라이언트 런타임 개체입니다.</param>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>
        <see cref="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" /> 메서드의 구현입니다.이 구현은 아무 작업도 수행하지 않습니다.</summary>
      <param name="serviceEndpoint">수정할 끝점입니다.   </param>
      <param name="endpointDispatcher">메서드에서 수정하는 끝점 디스패처입니다.   </param>
    </member>
    <member name="M:System.ServiceModel.CallbackBehaviorAttribute.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>런타임을 빌드하기 전에 끝점 설명의 유효성을 검사합니다.</summary>
      <param name="serviceEndpoint">유효성을 검사할 끝점입니다.</param>
    </member>
    <member name="P:System.ServiceModel.CallbackBehaviorAttribute.UseSynchronizationContext">
      <summary>현재 동기화 컨텍스트를 사용하여 실행 스레드를 선택할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>모든 서비스 호출이 <see cref="T:System.Threading.SynchronizationContext" />에서 지정한 스레드에서 실행되어야 하면 true이고, 그렇지 않으면 false입니다.기본값은 true입니다.</returns>
    </member>
    <member name="T:System.ServiceModel.DuplexChannelFactory`1">
      <summary>서비스 끝점에서 메시지를 받거나 보내기 위해 클라이언트에서 사용하는 여러 형식의 이중 채널을 만들고 관리하는 방법을 제공합니다.</summary>
      <typeparam name="TChannel">채널 팩터리에서 생성하는 채널 형식입니다.</typeparam>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding)">
      <summary>콜백 계약을 구현하는 컨텍스트 및 지정된 바인딩을 사용하여 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <param name="binding">팩터리에서 만든 채널을 통해 서비스에 연결하는 데 사용되는 <see cref="T:System.ServiceModel.Channels.Binding" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 또는 <paramref name="binding" />가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>콜백 계약을 구현하는 개체, 지정된 바인딩 및 끝점 주소를 사용하여 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <param name="binding">팩터리에서 만든 채널을 통해 서비스에 연결하는 데 사용되는 <see cref="T:System.ServiceModel.Channels.Binding" />입니다.</param>
      <param name="remoteAddress">서비스 위치를 제공하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" />, <paramref name="binding" /> 또는 <paramref name="remoteAddress" />가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.String)">
      <summary>지정된 인스턴스 컨텍스트, 바인딩 및 원격 주소를 사용하여 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <param name="binding">팩터리에서 만든 채널을 통해 서비스에 연결하는 데 사용되는 <see cref="T:System.ServiceModel.Channels.Binding" />입니다.</param>
      <param name="remoteAddress">서비스 위치를 제공하는 원격 주소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" />, <paramref name="binding" /> 또는 <paramref name="remoteAddress" />가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <summary>콜백 계약을 구현하는 개체 및 지정된 구성을 사용하여 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <param name="endpointConfigurationName">끝점 구성에 사용되는 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" /> 또는 <paramref name="endpointConfigurationName" />가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <summary>콜백 계약을 구현하는 개체, 지정된 구성 및 끝점 주소를 사용하여 <see cref="T:System.ServiceModel.DuplexChannelFactory`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <param name="endpointConfigurationName">끝점 구성에 사용되는 이름입니다.</param>
      <param name="remoteAddress">서비스 위치를 제공하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callbackInstance" />, <paramref name="endpointConfigurationName" /> 또는 <paramref name="remoteAddress" />가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>클라이언트의 콜백 인스턴스와 서비스 간 이중 채널을 만듭니다.</summary>
      <returns>팩터리에 대한 제네릭 매개 변수로, 클라이언트와 서비스 간의 <paramref name="TChannel" /> 형식인 이중 채널입니다.</returns>
      <param name="address">서비스 위치를 제공하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</param>
      <param name="via">메시지를 보낼 전송 주소를 포함하는 <see cref="T:System.Uri" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" />가 null입니다.</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext)">
      <summary>클라이언트의 콜백 인스턴스와 서비스 간 이중 채널을 만듭니다.</summary>
      <returns>팩터리에 대한 제네릭 매개 변수로, 클라이언트와 서비스 간의 <paramref name="TChannel" /> 형식인 이중 채널입니다.</returns>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 또는 <paramref name="callbackInstance" />.UserObject가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress)">
      <summary>클라이언트의 콜백 인스턴스와 서비스 간 이중 채널을 만듭니다.</summary>
      <returns>팩터리에 대한 제네릭 매개 변수로, 클라이언트와 서비스 간의 <paramref name="TChannel" /> 형식인 이중 채널입니다.</returns>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <param name="address">서비스 위치를 제공하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 또는 <paramref name="callbackInstance" />.UserObject가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexChannelFactory`1.CreateChannel(System.ServiceModel.InstanceContext,System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>클라이언트의 콜백 인스턴스와 서비스 간 이중 채널을 만듭니다.</summary>
      <returns>팩터리에 대한 제네릭 매개 변수로, 클라이언트와 서비스 간의 <paramref name="TChannel" /> 형식인 채널입니다.</returns>
      <param name="callbackInstance">클라이언트가 연결된 서비스에서 들어 오는 메시지를 수신 대기할 때 사용하는 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</param>
      <param name="address">서비스 위치를 제공하는 <see cref="T:System.ServiceModel.EndpointAddress" />입니다.</param>
      <param name="via">메시지를 보낼 전송 주소를 포함하는 <see cref="T:System.Uri" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" />가 null입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="callbackInstance" /> 또는 <paramref name="callbackInstance" />.UserObject가 null인 경우</exception>
    </member>
    <member name="T:System.ServiceModel.DuplexClientBase`1">
      <summary>이중 서비스에 대한 채널을 만들고 해당 채널을 콜백 개체와 연결하는 데 사용됩니다.</summary>
      <typeparam name="TChannel">만들 채널의 형식입니다.</typeparam>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext)">
      <summary>지정된 콜백 개체를 사용하여 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">콜백 개체를 서비스에 대한 채널과 연결하는 <see cref="T:System.ServiceModel.InstanceContext" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">콜백 인스턴스가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>지정된 콜백 개체, 바인딩 및 서비스 끝점 주소를 사용하여 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">콜백 개체를 서비스에 대한 채널과 연결하는 인스턴스 컨텍스트를 만드는 데 사용되는 개체입니다.</param>
      <param name="binding">서비스를 호출할 때 사용하는 바인딩입니다.</param>
      <param name="remoteAddress">사용할 서비스 끝점 주소입니다.</param>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String)">
      <summary>지정된 콜백 개체 및 구성 이름을 사용하여 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">콜백 개체를 서비스에 대한 채널과 연결하는 인스턴스 컨텍스트를 만드는 데 사용되는 개체입니다.</param>
      <param name="endpointConfigurationName">응용 프로그램 구성 파일의 클라이언트 끝점 정보 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">콜백 인스턴스가 null인 경우</exception>
      <exception cref="T:System.ArgumentNullException">구성 이름이 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.ServiceModel.EndpointAddress)">
      <summary>지정된 콜백 개체, 구성 이름 및 서비스 끝점 주소를 사용하여 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">콜백 개체를 서비스에 대한 채널과 연결하는 인스턴스 컨텍스트를 만드는 데 사용되는 개체입니다.</param>
      <param name="endpointConfigurationName">응용 프로그램 구성 파일의 클라이언트 끝점 정보 이름입니다.</param>
      <param name="remoteAddress">사용할 서비스 끝점의 주소입니다.</param>
      <exception cref="T:System.ArgumentNullException">콜백 인스턴스가 null인 경우</exception>
      <exception cref="T:System.ArgumentNullException">구성 이름이 null인 경우</exception>
      <exception cref="T:System.ArgumentNullException">주소가 null인 경우</exception>
    </member>
    <member name="M:System.ServiceModel.DuplexClientBase`1.#ctor(System.ServiceModel.InstanceContext,System.String,System.String)">
      <summary>지정된 콜백 개체, 구성 이름 및 서비스 끝점 주소를 사용하여 <see cref="T:System.ServiceModel.DuplexClientBase`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callbackInstance">콜백 개체를 서비스에 대한 채널과 연결하는 인스턴스 컨텍스트를 만드는 데 사용되는 개체입니다.</param>
      <param name="endpointConfigurationName">응용 프로그램 구성 파일의 클라이언트 끝점 정보 이름입니다.</param>
      <param name="remoteAddress">사용할 서비스 끝점의 주소입니다.</param>
      <exception cref="T:System.ArgumentNullException">콜백 인스턴스가 null인 경우</exception>
      <exception cref="T:System.ArgumentNullException">구성 이름이 null인 경우</exception>
      <exception cref="T:System.ArgumentNullException">주소가 null인 경우</exception>
    </member>
    <member name="T:System.ServiceModel.InstanceContext">
      <summary>서비스 인스턴스의 컨텍스트 정보를 나타냅니다.</summary>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.#ctor(System.Object)">
      <summary>서비스 인스턴스를 구현하는 지정된 개체에 대한 <see cref="T:System.ServiceModel.InstanceContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="implementation">서비스 인스턴스를 구현하는 개체입니다.</param>
    </member>
    <member name="M:System.ServiceModel.InstanceContext.GetServiceInstance(System.ServiceModel.Channels.Message)">
      <summary>들어오는 메시지에 대한 응답으로 인스턴스 컨텍스트의 서비스 인스턴스를 반환합니다.</summary>
      <returns>서비스 인스턴스를 나타내는 개체입니다.</returns>
      <param name="message">서비스 개체를 만들도록 트리거한 들어오는 메시지입니다.</param>
      <exception cref="T:System.InvalidOperationException">서비스 인스턴스가 만듦 상태 또는 열린 상태이거나 초기화되지 않은 경우</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">서비스 인스턴스가 중단된 경우</exception>
      <exception cref="T:System.ObjectDisposedException">서비스 인스턴스가 이미 닫혀 있으며, 이러한 상태에서 수정할 수 없는 경우</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">서비스 인스턴스에 오류가 발생했으며, 이러한 상태에서 수정할 수 없는 경우</exception>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.SynchronizationContext">
      <summary>현재 인스턴스 컨텍스트와 스레드를 동기화하는 데 사용되는 컨텍스트를 가져오거나 설정합니다.</summary>
      <returns>현재 인스턴스 컨텍스트와 스레드를 동기화하는 데 사용되는 <see cref="T:System.Threading.SynchronizationContext" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">통신 개체가 열려 있거나 닫힌 상태이며, 이러한 상태에서 수정할 수 없는 경우</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException">통신 개체가 중단되었으며, 이러한 상태에서 수정할 수 없는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">통신 개체가 이미 닫혔으며, 이러한 상태에서 수정할 수 없는 경우</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">통신 개체에 오류가 발생했으며, 이러한 상태에서 수정할 수 없는 경우</exception>
    </member>
    <member name="P:System.ServiceModel.InstanceContext.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>확장 개체의 컬렉션입니다.</summary>
      <returns>
        <see cref="T:System.ServiceModel.IExtensionCollection`1" />를 반환합니다.</returns>
    </member>
  </members>
</doc>